/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables;


import app.finwave.backend.jooq.Indexes;
import app.finwave.backend.jooq.Keys;
import app.finwave.backend.jooq.Public;
import app.finwave.backend.jooq.tables.records.TransactionsMetadataRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionsMetadata extends TableImpl<TransactionsMetadataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.transactions_metadata</code>
     */
    public static final TransactionsMetadata TRANSACTIONS_METADATA = new TransactionsMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsMetadataRecord> getRecordType() {
        return TransactionsMetadataRecord.class;
    }

    /**
     * The column <code>public.transactions_metadata.id</code>.
     */
    public final TableField<TransactionsMetadataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.transactions_metadata.type</code>.
     */
    public final TableField<TransactionsMetadataRecord, Short> TYPE = createField(DSL.name("type"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.transactions_metadata.arg</code>.
     */
    public final TableField<TransactionsMetadataRecord, Long> ARG = createField(DSL.name("arg"), SQLDataType.BIGINT, this, "");

    private TransactionsMetadata(Name alias, Table<TransactionsMetadataRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionsMetadata(Name alias, Table<TransactionsMetadataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.transactions_metadata</code> table
     * reference
     */
    public TransactionsMetadata(String alias) {
        this(DSL.name(alias), TRANSACTIONS_METADATA);
    }

    /**
     * Create an aliased <code>public.transactions_metadata</code> table
     * reference
     */
    public TransactionsMetadata(Name alias) {
        this(alias, TRANSACTIONS_METADATA);
    }

    /**
     * Create a <code>public.transactions_metadata</code> table reference
     */
    public TransactionsMetadata() {
        this(DSL.name("transactions_metadata"), null);
    }

    public <O extends Record> TransactionsMetadata(Table<O> child, ForeignKey<O, TransactionsMetadataRecord> key) {
        super(child, key, TRANSACTIONS_METADATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TRANSACTIONS_METADATA);
    }

    @Override
    public Identity<TransactionsMetadataRecord, Long> getIdentity() {
        return (Identity<TransactionsMetadataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionsMetadataRecord> getPrimaryKey() {
        return Keys.TRANSACTIONS_METADATA_PKEY;
    }

    @Override
    public TransactionsMetadata as(String alias) {
        return new TransactionsMetadata(DSL.name(alias), this);
    }

    @Override
    public TransactionsMetadata as(Name alias) {
        return new TransactionsMetadata(alias, this);
    }

    @Override
    public TransactionsMetadata as(Table<?> alias) {
        return new TransactionsMetadata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionsMetadata rename(String name) {
        return new TransactionsMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionsMetadata rename(Name name) {
        return new TransactionsMetadata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionsMetadata rename(Table<?> name) {
        return new TransactionsMetadata(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Short, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Short, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Short, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
