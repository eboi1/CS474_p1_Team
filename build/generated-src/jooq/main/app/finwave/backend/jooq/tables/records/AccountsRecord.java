/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables.records;


import app.finwave.backend.jooq.tables.Accounts;

import java.math.BigDecimal;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountsRecord extends UpdatableRecordImpl<AccountsRecord> implements Record8<Long, Integer, Long, Long, BigDecimal, Boolean, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.accounts.id</code>.
     */
    public AccountsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.accounts.owner_id</code>.
     */
    public AccountsRecord setOwnerId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.owner_id</code>.
     */
    public Integer getOwnerId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.accounts.folder_id</code>.
     */
    public AccountsRecord setFolderId(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.folder_id</code>.
     */
    public Long getFolderId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.accounts.currency_id</code>.
     */
    public AccountsRecord setCurrencyId(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.currency_id</code>.
     */
    public Long getCurrencyId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.accounts.amount</code>.
     */
    public AccountsRecord setAmount(BigDecimal value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.amount</code>.
     */
    public BigDecimal getAmount() {
        return (BigDecimal) get(4);
    }

    /**
     * Setter for <code>public.accounts.hidden</code>.
     */
    public AccountsRecord setHidden(Boolean value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.hidden</code>.
     */
    public Boolean getHidden() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>public.accounts.name</code>.
     */
    public AccountsRecord setName(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.name</code>.
     */
    public String getName() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.accounts.description</code>.
     */
    public AccountsRecord setDescription(String value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.description</code>.
     */
    public String getDescription() {
        return (String) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Integer, Long, Long, BigDecimal, Boolean, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Integer, Long, Long, BigDecimal, Boolean, String, String> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Accounts.ACCOUNTS.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Accounts.ACCOUNTS.OWNER_ID;
    }

    @Override
    public Field<Long> field3() {
        return Accounts.ACCOUNTS.FOLDER_ID;
    }

    @Override
    public Field<Long> field4() {
        return Accounts.ACCOUNTS.CURRENCY_ID;
    }

    @Override
    public Field<BigDecimal> field5() {
        return Accounts.ACCOUNTS.AMOUNT;
    }

    @Override
    public Field<Boolean> field6() {
        return Accounts.ACCOUNTS.HIDDEN;
    }

    @Override
    public Field<String> field7() {
        return Accounts.ACCOUNTS.NAME;
    }

    @Override
    public Field<String> field8() {
        return Accounts.ACCOUNTS.DESCRIPTION;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getOwnerId();
    }

    @Override
    public Long component3() {
        return getFolderId();
    }

    @Override
    public Long component4() {
        return getCurrencyId();
    }

    @Override
    public BigDecimal component5() {
        return getAmount();
    }

    @Override
    public Boolean component6() {
        return getHidden();
    }

    @Override
    public String component7() {
        return getName();
    }

    @Override
    public String component8() {
        return getDescription();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getOwnerId();
    }

    @Override
    public Long value3() {
        return getFolderId();
    }

    @Override
    public Long value4() {
        return getCurrencyId();
    }

    @Override
    public BigDecimal value5() {
        return getAmount();
    }

    @Override
    public Boolean value6() {
        return getHidden();
    }

    @Override
    public String value7() {
        return getName();
    }

    @Override
    public String value8() {
        return getDescription();
    }

    @Override
    public AccountsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AccountsRecord value2(Integer value) {
        setOwnerId(value);
        return this;
    }

    @Override
    public AccountsRecord value3(Long value) {
        setFolderId(value);
        return this;
    }

    @Override
    public AccountsRecord value4(Long value) {
        setCurrencyId(value);
        return this;
    }

    @Override
    public AccountsRecord value5(BigDecimal value) {
        setAmount(value);
        return this;
    }

    @Override
    public AccountsRecord value6(Boolean value) {
        setHidden(value);
        return this;
    }

    @Override
    public AccountsRecord value7(String value) {
        setName(value);
        return this;
    }

    @Override
    public AccountsRecord value8(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public AccountsRecord values(Long value1, Integer value2, Long value3, Long value4, BigDecimal value5, Boolean value6, String value7, String value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountsRecord
     */
    public AccountsRecord() {
        super(Accounts.ACCOUNTS);
    }

    /**
     * Create a detached, initialised AccountsRecord
     */
    public AccountsRecord(Long id, Integer ownerId, Long folderId, Long currencyId, BigDecimal amount, Boolean hidden, String name, String description) {
        super(Accounts.ACCOUNTS);

        setId(id);
        setOwnerId(ownerId);
        setFolderId(folderId);
        setCurrencyId(currencyId);
        setAmount(amount);
        setHidden(hidden);
        setName(name);
        setDescription(description);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AccountsRecord
     */
    public AccountsRecord(app.finwave.backend.jooq.tables.pojos.Accounts value) {
        super(Accounts.ACCOUNTS);

        if (value != null) {
            setId(value.getId());
            setOwnerId(value.getOwnerId());
            setFolderId(value.getFolderId());
            setCurrencyId(value.getCurrencyId());
            setAmount(value.getAmount());
            setHidden(value.getHidden());
            setName(value.getName());
            setDescription(value.getDescription());
            resetChangedOnNotNull();
        }
    }
}
