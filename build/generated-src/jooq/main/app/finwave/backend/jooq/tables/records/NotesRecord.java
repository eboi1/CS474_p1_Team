/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables.records;


import app.finwave.backend.jooq.tables.Notes;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotesRecord extends UpdatableRecordImpl<NotesRecord> implements Record5<Long, Integer, OffsetDateTime, OffsetDateTime, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.notes.id</code>.
     */
    public NotesRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.notes.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.notes.owner_id</code>.
     */
    public NotesRecord setOwnerId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.notes.owner_id</code>.
     */
    public Integer getOwnerId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.notes.notification_time</code>.
     */
    public NotesRecord setNotificationTime(OffsetDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.notes.notification_time</code>.
     */
    public OffsetDateTime getNotificationTime() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>public.notes.last_edit</code>.
     */
    public NotesRecord setLastEdit(OffsetDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.notes.last_edit</code>.
     */
    public OffsetDateTime getLastEdit() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>public.notes.note</code>.
     */
    public NotesRecord setNote(String value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.notes.note</code>.
     */
    public String getNote() {
        return (String) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, OffsetDateTime, OffsetDateTime, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, Integer, OffsetDateTime, OffsetDateTime, String> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Notes.NOTES.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Notes.NOTES.OWNER_ID;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return Notes.NOTES.NOTIFICATION_TIME;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return Notes.NOTES.LAST_EDIT;
    }

    @Override
    public Field<String> field5() {
        return Notes.NOTES.NOTE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getOwnerId();
    }

    @Override
    public OffsetDateTime component3() {
        return getNotificationTime();
    }

    @Override
    public OffsetDateTime component4() {
        return getLastEdit();
    }

    @Override
    public String component5() {
        return getNote();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getOwnerId();
    }

    @Override
    public OffsetDateTime value3() {
        return getNotificationTime();
    }

    @Override
    public OffsetDateTime value4() {
        return getLastEdit();
    }

    @Override
    public String value5() {
        return getNote();
    }

    @Override
    public NotesRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public NotesRecord value2(Integer value) {
        setOwnerId(value);
        return this;
    }

    @Override
    public NotesRecord value3(OffsetDateTime value) {
        setNotificationTime(value);
        return this;
    }

    @Override
    public NotesRecord value4(OffsetDateTime value) {
        setLastEdit(value);
        return this;
    }

    @Override
    public NotesRecord value5(String value) {
        setNote(value);
        return this;
    }

    @Override
    public NotesRecord values(Long value1, Integer value2, OffsetDateTime value3, OffsetDateTime value4, String value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NotesRecord
     */
    public NotesRecord() {
        super(Notes.NOTES);
    }

    /**
     * Create a detached, initialised NotesRecord
     */
    public NotesRecord(Long id, Integer ownerId, OffsetDateTime notificationTime, OffsetDateTime lastEdit, String note) {
        super(Notes.NOTES);

        setId(id);
        setOwnerId(ownerId);
        setNotificationTime(notificationTime);
        setLastEdit(lastEdit);
        setNote(note);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised NotesRecord
     */
    public NotesRecord(app.finwave.backend.jooq.tables.pojos.Notes value) {
        super(Notes.NOTES);

        if (value != null) {
            setId(value.getId());
            setOwnerId(value.getOwnerId());
            setNotificationTime(value.getNotificationTime());
            setLastEdit(value.getLastEdit());
            setNote(value.getNote());
            resetChangedOnNotNull();
        }
    }
}
