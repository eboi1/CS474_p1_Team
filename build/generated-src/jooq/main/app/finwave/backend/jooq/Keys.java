/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq;


import app.finwave.backend.jooq.tables.Accounts;
import app.finwave.backend.jooq.tables.AccountsFolders;
import app.finwave.backend.jooq.tables.AccumulationSettings;
import app.finwave.backend.jooq.tables.AiContexts;
import app.finwave.backend.jooq.tables.AiMessages;
import app.finwave.backend.jooq.tables.Categories;
import app.finwave.backend.jooq.tables.CategoriesBudgets;
import app.finwave.backend.jooq.tables.Currencies;
import app.finwave.backend.jooq.tables.Files;
import app.finwave.backend.jooq.tables.FlywaySchemaHistory;
import app.finwave.backend.jooq.tables.InternalTransactionsMetadata;
import app.finwave.backend.jooq.tables.Notes;
import app.finwave.backend.jooq.tables.NotificationsPoints;
import app.finwave.backend.jooq.tables.NotificationsPull;
import app.finwave.backend.jooq.tables.RecurringTransactions;
import app.finwave.backend.jooq.tables.Reports;
import app.finwave.backend.jooq.tables.Transactions;
import app.finwave.backend.jooq.tables.TransactionsMetadata;
import app.finwave.backend.jooq.tables.Users;
import app.finwave.backend.jooq.tables.UsersSessions;
import app.finwave.backend.jooq.tables.records.AccountsFoldersRecord;
import app.finwave.backend.jooq.tables.records.AccountsRecord;
import app.finwave.backend.jooq.tables.records.AccumulationSettingsRecord;
import app.finwave.backend.jooq.tables.records.AiContextsRecord;
import app.finwave.backend.jooq.tables.records.AiMessagesRecord;
import app.finwave.backend.jooq.tables.records.CategoriesBudgetsRecord;
import app.finwave.backend.jooq.tables.records.CategoriesRecord;
import app.finwave.backend.jooq.tables.records.CurrenciesRecord;
import app.finwave.backend.jooq.tables.records.FilesRecord;
import app.finwave.backend.jooq.tables.records.FlywaySchemaHistoryRecord;
import app.finwave.backend.jooq.tables.records.InternalTransactionsMetadataRecord;
import app.finwave.backend.jooq.tables.records.NotesRecord;
import app.finwave.backend.jooq.tables.records.NotificationsPointsRecord;
import app.finwave.backend.jooq.tables.records.NotificationsPullRecord;
import app.finwave.backend.jooq.tables.records.RecurringTransactionsRecord;
import app.finwave.backend.jooq.tables.records.ReportsRecord;
import app.finwave.backend.jooq.tables.records.TransactionsMetadataRecord;
import app.finwave.backend.jooq.tables.records.TransactionsRecord;
import app.finwave.backend.jooq.tables.records.UsersRecord;
import app.finwave.backend.jooq.tables.records.UsersSessionsRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AccountsRecord> ACCOUNTS_PKEY = Internal.createUniqueKey(Accounts.ACCOUNTS, DSL.name("accounts_pkey"), new TableField[] { Accounts.ACCOUNTS.ID }, true);
    public static final UniqueKey<AccountsFoldersRecord> ACCOUNTS_TAGS_PKEY = Internal.createUniqueKey(AccountsFolders.ACCOUNTS_FOLDERS, DSL.name("accounts_tags_pkey"), new TableField[] { AccountsFolders.ACCOUNTS_FOLDERS.ID }, true);
    public static final UniqueKey<AccumulationSettingsRecord> ACCUMULATION_SETTINGS_SOURCE_ACCOUNT_ID_KEY = Internal.createUniqueKey(AccumulationSettings.ACCUMULATION_SETTINGS, DSL.name("accumulation_settings_source_account_id_key"), new TableField[] { AccumulationSettings.ACCUMULATION_SETTINGS.SOURCE_ACCOUNT_ID }, true);
    public static final UniqueKey<AiContextsRecord> AI_CONTEXTS_PKEY = Internal.createUniqueKey(AiContexts.AI_CONTEXTS, DSL.name("ai_contexts_pkey"), new TableField[] { AiContexts.AI_CONTEXTS.ID }, true);
    public static final UniqueKey<AiMessagesRecord> AI_MESSAGES_PKEY = Internal.createUniqueKey(AiMessages.AI_MESSAGES, DSL.name("ai_messages_pkey"), new TableField[] { AiMessages.AI_MESSAGES.ID }, true);
    public static final UniqueKey<CategoriesRecord> TRANSACTIONS_TAGS_PKEY = Internal.createUniqueKey(Categories.CATEGORIES, DSL.name("transactions_tags_pkey"), new TableField[] { Categories.CATEGORIES.ID }, true);
    public static final UniqueKey<CategoriesBudgetsRecord> TRANSACTIONS_TAGS_MANAGEMENT_PKEY = Internal.createUniqueKey(CategoriesBudgets.CATEGORIES_BUDGETS, DSL.name("transactions_tags_management_pkey"), new TableField[] { CategoriesBudgets.CATEGORIES_BUDGETS.ID }, true);
    public static final UniqueKey<CurrenciesRecord> CURRENCIES_PKEY = Internal.createUniqueKey(Currencies.CURRENCIES, DSL.name("currencies_pkey"), new TableField[] { Currencies.CURRENCIES.ID }, true);
    public static final UniqueKey<FilesRecord> FILES_ID_KEY = Internal.createUniqueKey(Files.FILES, DSL.name("files_id_key"), new TableField[] { Files.FILES.ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<InternalTransactionsMetadataRecord> INTERNAL_TRANSFERS_PKEY = Internal.createUniqueKey(InternalTransactionsMetadata.INTERNAL_TRANSACTIONS_METADATA, DSL.name("internal_transfers_pkey"), new TableField[] { InternalTransactionsMetadata.INTERNAL_TRANSACTIONS_METADATA.ID }, true);
    public static final UniqueKey<NotesRecord> NOTES_PKEY = Internal.createUniqueKey(Notes.NOTES, DSL.name("notes_pkey"), new TableField[] { Notes.NOTES.ID }, true);
    public static final UniqueKey<NotificationsPointsRecord> NOTIFICATIONS_POINTS_PKEY = Internal.createUniqueKey(NotificationsPoints.NOTIFICATIONS_POINTS, DSL.name("notifications_points_pkey"), new TableField[] { NotificationsPoints.NOTIFICATIONS_POINTS.ID }, true);
    public static final UniqueKey<NotificationsPullRecord> NOTIFICATIONS_PULL_PKEY = Internal.createUniqueKey(NotificationsPull.NOTIFICATIONS_PULL, DSL.name("notifications_pull_pkey"), new TableField[] { NotificationsPull.NOTIFICATIONS_PULL.ID }, true);
    public static final UniqueKey<RecurringTransactionsRecord> RECURRING_TRANSACTIONS_PKEY = Internal.createUniqueKey(RecurringTransactions.RECURRING_TRANSACTIONS, DSL.name("recurring_transactions_pkey"), new TableField[] { RecurringTransactions.RECURRING_TRANSACTIONS.ID }, true);
    public static final UniqueKey<ReportsRecord> REPORTS_PKEY = Internal.createUniqueKey(Reports.REPORTS, DSL.name("reports_pkey"), new TableField[] { Reports.REPORTS.ID }, true);
    public static final UniqueKey<TransactionsRecord> TRANSACTIONS_PKEY = Internal.createUniqueKey(Transactions.TRANSACTIONS, DSL.name("transactions_pkey"), new TableField[] { Transactions.TRANSACTIONS.ID }, true);
    public static final UniqueKey<TransactionsMetadataRecord> TRANSACTIONS_METADATA_PKEY = Internal.createUniqueKey(TransactionsMetadata.TRANSACTIONS_METADATA, DSL.name("transactions_metadata_pkey"), new TableField[] { TransactionsMetadata.TRANSACTIONS_METADATA.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_USERNAME_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_username_key"), new TableField[] { Users.USERS.USERNAME }, true);
    public static final UniqueKey<UsersSessionsRecord> USERS_SESSIONS_PKEY = Internal.createUniqueKey(UsersSessions.USERS_SESSIONS, DSL.name("users_sessions_pkey"), new TableField[] { UsersSessions.USERS_SESSIONS.ID }, true);
    public static final UniqueKey<UsersSessionsRecord> USERS_SESSIONS_TOKEN_KEY = Internal.createUniqueKey(UsersSessions.USERS_SESSIONS, DSL.name("users_sessions_token_key"), new TableField[] { UsersSessions.USERS_SESSIONS.TOKEN }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AccountsRecord, CurrenciesRecord> ACCOUNTS__ACCOUNTS_CURRENCY_ID_FKEY = Internal.createForeignKey(Accounts.ACCOUNTS, DSL.name("accounts_currency_id_fkey"), new TableField[] { Accounts.ACCOUNTS.CURRENCY_ID }, Keys.CURRENCIES_PKEY, new TableField[] { Currencies.CURRENCIES.ID }, true);
    public static final ForeignKey<AccountsRecord, UsersRecord> ACCOUNTS__ACCOUNTS_OWNER_ID_FKEY = Internal.createForeignKey(Accounts.ACCOUNTS, DSL.name("accounts_owner_id_fkey"), new TableField[] { Accounts.ACCOUNTS.OWNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<AccountsRecord, AccountsFoldersRecord> ACCOUNTS__ACCOUNTS_TAG_ID_FKEY = Internal.createForeignKey(Accounts.ACCOUNTS, DSL.name("accounts_tag_id_fkey"), new TableField[] { Accounts.ACCOUNTS.FOLDER_ID }, Keys.ACCOUNTS_TAGS_PKEY, new TableField[] { AccountsFolders.ACCOUNTS_FOLDERS.ID }, true);
    public static final ForeignKey<AccountsFoldersRecord, UsersRecord> ACCOUNTS_FOLDERS__ACCOUNTS_TAGS_OWNER_ID_FKEY = Internal.createForeignKey(AccountsFolders.ACCOUNTS_FOLDERS, DSL.name("accounts_tags_owner_id_fkey"), new TableField[] { AccountsFolders.ACCOUNTS_FOLDERS.OWNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<AccumulationSettingsRecord, UsersRecord> ACCUMULATION_SETTINGS__ACCUMULATION_SETTINGS_OWNER_ID_FKEY = Internal.createForeignKey(AccumulationSettings.ACCUMULATION_SETTINGS, DSL.name("accumulation_settings_owner_id_fkey"), new TableField[] { AccumulationSettings.ACCUMULATION_SETTINGS.OWNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<AccumulationSettingsRecord, AccountsRecord> ACCUMULATION_SETTINGS__ACCUMULATION_SETTINGS_SOURCE_ACCOUNT_ID_FKEY = Internal.createForeignKey(AccumulationSettings.ACCUMULATION_SETTINGS, DSL.name("accumulation_settings_source_account_id_fkey"), new TableField[] { AccumulationSettings.ACCUMULATION_SETTINGS.SOURCE_ACCOUNT_ID }, Keys.ACCOUNTS_PKEY, new TableField[] { Accounts.ACCOUNTS.ID }, true);
    public static final ForeignKey<AccumulationSettingsRecord, CategoriesRecord> ACCUMULATION_SETTINGS__ACCUMULATION_SETTINGS_TAG_ID_FKEY = Internal.createForeignKey(AccumulationSettings.ACCUMULATION_SETTINGS, DSL.name("accumulation_settings_tag_id_fkey"), new TableField[] { AccumulationSettings.ACCUMULATION_SETTINGS.CATEGORY_ID }, Keys.TRANSACTIONS_TAGS_PKEY, new TableField[] { Categories.CATEGORIES.ID }, true);
    public static final ForeignKey<AccumulationSettingsRecord, AccountsRecord> ACCUMULATION_SETTINGS__ACCUMULATION_SETTINGS_TARGET_ACCOUNT_ID_FKEY = Internal.createForeignKey(AccumulationSettings.ACCUMULATION_SETTINGS, DSL.name("accumulation_settings_target_account_id_fkey"), new TableField[] { AccumulationSettings.ACCUMULATION_SETTINGS.TARGET_ACCOUNT_ID }, Keys.ACCOUNTS_PKEY, new TableField[] { Accounts.ACCOUNTS.ID }, true);
    public static final ForeignKey<AiContextsRecord, UsersRecord> AI_CONTEXTS__AI_CONTEXTS_OWNER_ID_FKEY = Internal.createForeignKey(AiContexts.AI_CONTEXTS, DSL.name("ai_contexts_owner_id_fkey"), new TableField[] { AiContexts.AI_CONTEXTS.OWNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<AiMessagesRecord, AiContextsRecord> AI_MESSAGES__AI_MESSAGES_AI_CONTEXT_FKEY = Internal.createForeignKey(AiMessages.AI_MESSAGES, DSL.name("ai_messages_ai_context_fkey"), new TableField[] { AiMessages.AI_MESSAGES.AI_CONTEXT }, Keys.AI_CONTEXTS_PKEY, new TableField[] { AiContexts.AI_CONTEXTS.ID }, true);
    public static final ForeignKey<CategoriesRecord, UsersRecord> CATEGORIES__TRANSACTIONS_TAGS_OWNER_ID_FKEY = Internal.createForeignKey(Categories.CATEGORIES, DSL.name("transactions_tags_owner_id_fkey"), new TableField[] { Categories.CATEGORIES.OWNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<CategoriesBudgetsRecord, CurrenciesRecord> CATEGORIES_BUDGETS__TRANSACTIONS_TAGS_MANAGEMENT_CURRENCY_ID_FKEY = Internal.createForeignKey(CategoriesBudgets.CATEGORIES_BUDGETS, DSL.name("transactions_tags_management_currency_id_fkey"), new TableField[] { CategoriesBudgets.CATEGORIES_BUDGETS.CURRENCY_ID }, Keys.CURRENCIES_PKEY, new TableField[] { Currencies.CURRENCIES.ID }, true);
    public static final ForeignKey<CategoriesBudgetsRecord, UsersRecord> CATEGORIES_BUDGETS__TRANSACTIONS_TAGS_MANAGEMENT_OWNER_ID_FKEY = Internal.createForeignKey(CategoriesBudgets.CATEGORIES_BUDGETS, DSL.name("transactions_tags_management_owner_id_fkey"), new TableField[] { CategoriesBudgets.CATEGORIES_BUDGETS.OWNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<CategoriesBudgetsRecord, CategoriesRecord> CATEGORIES_BUDGETS__TRANSACTIONS_TAGS_MANAGEMENT_TAG_ID_FKEY = Internal.createForeignKey(CategoriesBudgets.CATEGORIES_BUDGETS, DSL.name("transactions_tags_management_tag_id_fkey"), new TableField[] { CategoriesBudgets.CATEGORIES_BUDGETS.CATEGORY_ID }, Keys.TRANSACTIONS_TAGS_PKEY, new TableField[] { Categories.CATEGORIES.ID }, true);
    public static final ForeignKey<CurrenciesRecord, UsersRecord> CURRENCIES__CURRENCIES_OWNER_ID_FKEY = Internal.createForeignKey(Currencies.CURRENCIES, DSL.name("currencies_owner_id_fkey"), new TableField[] { Currencies.CURRENCIES.OWNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<FilesRecord, UsersRecord> FILES__FILES_OWNER_ID_FKEY = Internal.createForeignKey(Files.FILES, DSL.name("files_owner_id_fkey"), new TableField[] { Files.FILES.OWNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<InternalTransactionsMetadataRecord, TransactionsRecord> INTERNAL_TRANSACTIONS_METADATA__INTERNAL_TRANSFERS_FROM_TRANSACTION_ID_FKEY = Internal.createForeignKey(InternalTransactionsMetadata.INTERNAL_TRANSACTIONS_METADATA, DSL.name("internal_transfers_from_transaction_id_fkey"), new TableField[] { InternalTransactionsMetadata.INTERNAL_TRANSACTIONS_METADATA.FROM_TRANSACTION_ID }, Keys.TRANSACTIONS_PKEY, new TableField[] { Transactions.TRANSACTIONS.ID }, true);
    public static final ForeignKey<InternalTransactionsMetadataRecord, TransactionsRecord> INTERNAL_TRANSACTIONS_METADATA__INTERNAL_TRANSFERS_TO_TRANSACTION_ID_FKEY = Internal.createForeignKey(InternalTransactionsMetadata.INTERNAL_TRANSACTIONS_METADATA, DSL.name("internal_transfers_to_transaction_id_fkey"), new TableField[] { InternalTransactionsMetadata.INTERNAL_TRANSACTIONS_METADATA.TO_TRANSACTION_ID }, Keys.TRANSACTIONS_PKEY, new TableField[] { Transactions.TRANSACTIONS.ID }, true);
    public static final ForeignKey<NotesRecord, UsersRecord> NOTES__NOTES_OWNER_ID_FKEY = Internal.createForeignKey(Notes.NOTES, DSL.name("notes_owner_id_fkey"), new TableField[] { Notes.NOTES.OWNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<NotificationsPointsRecord, UsersRecord> NOTIFICATIONS_POINTS__NOTIFICATIONS_POINTS_USER_ID_FKEY = Internal.createForeignKey(NotificationsPoints.NOTIFICATIONS_POINTS, DSL.name("notifications_points_user_id_fkey"), new TableField[] { NotificationsPoints.NOTIFICATIONS_POINTS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<NotificationsPullRecord, UsersRecord> NOTIFICATIONS_PULL__NOTIFICATIONS_PULL_USER_ID_FKEY = Internal.createForeignKey(NotificationsPull.NOTIFICATIONS_PULL, DSL.name("notifications_pull_user_id_fkey"), new TableField[] { NotificationsPull.NOTIFICATIONS_PULL.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<RecurringTransactionsRecord, AccountsRecord> RECURRING_TRANSACTIONS__RECURRING_TRANSACTIONS_ACCOUNT_ID_FKEY = Internal.createForeignKey(RecurringTransactions.RECURRING_TRANSACTIONS, DSL.name("recurring_transactions_account_id_fkey"), new TableField[] { RecurringTransactions.RECURRING_TRANSACTIONS.ACCOUNT_ID }, Keys.ACCOUNTS_PKEY, new TableField[] { Accounts.ACCOUNTS.ID }, true);
    public static final ForeignKey<RecurringTransactionsRecord, CurrenciesRecord> RECURRING_TRANSACTIONS__RECURRING_TRANSACTIONS_CURRENCY_ID_FKEY = Internal.createForeignKey(RecurringTransactions.RECURRING_TRANSACTIONS, DSL.name("recurring_transactions_currency_id_fkey"), new TableField[] { RecurringTransactions.RECURRING_TRANSACTIONS.CURRENCY_ID }, Keys.CURRENCIES_PKEY, new TableField[] { Currencies.CURRENCIES.ID }, true);
    public static final ForeignKey<RecurringTransactionsRecord, UsersRecord> RECURRING_TRANSACTIONS__RECURRING_TRANSACTIONS_OWNER_ID_FKEY = Internal.createForeignKey(RecurringTransactions.RECURRING_TRANSACTIONS, DSL.name("recurring_transactions_owner_id_fkey"), new TableField[] { RecurringTransactions.RECURRING_TRANSACTIONS.OWNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<RecurringTransactionsRecord, CategoriesRecord> RECURRING_TRANSACTIONS__RECURRING_TRANSACTIONS_TAG_ID_FKEY = Internal.createForeignKey(RecurringTransactions.RECURRING_TRANSACTIONS, DSL.name("recurring_transactions_tag_id_fkey"), new TableField[] { RecurringTransactions.RECURRING_TRANSACTIONS.CATEGORY_ID }, Keys.TRANSACTIONS_TAGS_PKEY, new TableField[] { Categories.CATEGORIES.ID }, true);
    public static final ForeignKey<ReportsRecord, UsersRecord> REPORTS__REPORTS_USER_ID_FKEY = Internal.createForeignKey(Reports.REPORTS, DSL.name("reports_user_id_fkey"), new TableField[] { Reports.REPORTS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<TransactionsRecord, AccountsRecord> TRANSACTIONS__TRANSACTIONS_ACCOUNT_ID_FKEY = Internal.createForeignKey(Transactions.TRANSACTIONS, DSL.name("transactions_account_id_fkey"), new TableField[] { Transactions.TRANSACTIONS.ACCOUNT_ID }, Keys.ACCOUNTS_PKEY, new TableField[] { Accounts.ACCOUNTS.ID }, true);
    public static final ForeignKey<TransactionsRecord, CurrenciesRecord> TRANSACTIONS__TRANSACTIONS_CURRENCY_ID_FKEY = Internal.createForeignKey(Transactions.TRANSACTIONS, DSL.name("transactions_currency_id_fkey"), new TableField[] { Transactions.TRANSACTIONS.CURRENCY_ID }, Keys.CURRENCIES_PKEY, new TableField[] { Currencies.CURRENCIES.ID }, true);
    public static final ForeignKey<TransactionsRecord, TransactionsMetadataRecord> TRANSACTIONS__TRANSACTIONS_METADATA_ID_FKEY = Internal.createForeignKey(Transactions.TRANSACTIONS, DSL.name("transactions_metadata_id_fkey"), new TableField[] { Transactions.TRANSACTIONS.METADATA_ID }, Keys.TRANSACTIONS_METADATA_PKEY, new TableField[] { TransactionsMetadata.TRANSACTIONS_METADATA.ID }, true);
    public static final ForeignKey<TransactionsRecord, UsersRecord> TRANSACTIONS__TRANSACTIONS_OWNER_ID_FKEY = Internal.createForeignKey(Transactions.TRANSACTIONS, DSL.name("transactions_owner_id_fkey"), new TableField[] { Transactions.TRANSACTIONS.OWNER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<TransactionsRecord, CategoriesRecord> TRANSACTIONS__TRANSACTIONS_TAG_ID_FKEY = Internal.createForeignKey(Transactions.TRANSACTIONS, DSL.name("transactions_tag_id_fkey"), new TableField[] { Transactions.TRANSACTIONS.CATEGORY_ID }, Keys.TRANSACTIONS_TAGS_PKEY, new TableField[] { Categories.CATEGORIES.ID }, true);
    public static final ForeignKey<UsersSessionsRecord, UsersRecord> USERS_SESSIONS__USERS_SESSIONS_USER_ID_FKEY = Internal.createForeignKey(UsersSessions.USERS_SESSIONS, DSL.name("users_sessions_user_id_fkey"), new TableField[] { UsersSessions.USERS_SESSIONS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
}
