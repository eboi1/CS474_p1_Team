/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables;


import app.finwave.backend.jooq.Keys;
import app.finwave.backend.jooq.Public;
import app.finwave.backend.jooq.tables.records.CurrenciesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Currencies extends TableImpl<CurrenciesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.currencies</code>
     */
    public static final Currencies CURRENCIES = new Currencies();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CurrenciesRecord> getRecordType() {
        return CurrenciesRecord.class;
    }

    /**
     * The column <code>public.currencies.id</code>.
     */
    public final TableField<CurrenciesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.currencies.owner_id</code>.
     */
    public final TableField<CurrenciesRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.currencies.code</code>.
     */
    public final TableField<CurrenciesRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.currencies.symbol</code>.
     */
    public final TableField<CurrenciesRecord, String> SYMBOL = createField(DSL.name("symbol"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.currencies.decimals</code>.
     */
    public final TableField<CurrenciesRecord, Short> DECIMALS = createField(DSL.name("decimals"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.currencies.description</code>.
     */
    public final TableField<CurrenciesRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB.nullable(false), this, "");

    private Currencies(Name alias, Table<CurrenciesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Currencies(Name alias, Table<CurrenciesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.currencies</code> table reference
     */
    public Currencies(String alias) {
        this(DSL.name(alias), CURRENCIES);
    }

    /**
     * Create an aliased <code>public.currencies</code> table reference
     */
    public Currencies(Name alias) {
        this(alias, CURRENCIES);
    }

    /**
     * Create a <code>public.currencies</code> table reference
     */
    public Currencies() {
        this(DSL.name("currencies"), null);
    }

    public <O extends Record> Currencies(Table<O> child, ForeignKey<O, CurrenciesRecord> key) {
        super(child, key, CURRENCIES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CurrenciesRecord, Long> getIdentity() {
        return (Identity<CurrenciesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CurrenciesRecord> getPrimaryKey() {
        return Keys.CURRENCIES_PKEY;
    }

    @Override
    public List<ForeignKey<CurrenciesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CURRENCIES__CURRENCIES_OWNER_ID_FKEY);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.CURRENCIES__CURRENCIES_OWNER_ID_FKEY);

        return _users;
    }

    @Override
    public Currencies as(String alias) {
        return new Currencies(DSL.name(alias), this);
    }

    @Override
    public Currencies as(Name alias) {
        return new Currencies(alias, this);
    }

    @Override
    public Currencies as(Table<?> alias) {
        return new Currencies(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Currencies rename(String name) {
        return new Currencies(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Currencies rename(Name name) {
        return new Currencies(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Currencies rename(Table<?> name) {
        return new Currencies(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Integer, String, String, Short, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Integer, ? super String, ? super String, ? super Short, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Integer, ? super String, ? super String, ? super Short, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
