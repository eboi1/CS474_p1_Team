/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables.records;


import app.finwave.backend.jooq.tables.Reports;

import org.jooq.Field;
import org.jooq.JSONB;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReportsRecord extends UpdatableRecordImpl<ReportsRecord> implements Record8<String, Short, Short, JSONB, JSONB, Integer, String, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.reports.description</code>.
     */
    public ReportsRecord setDescription(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.reports.description</code>.
     */
    public String getDescription() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.reports.status</code>.
     */
    public ReportsRecord setStatus(Short value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.reports.status</code>.
     */
    public Short getStatus() {
        return (Short) get(1);
    }

    /**
     * Setter for <code>public.reports.type</code>.
     */
    public ReportsRecord setType(Short value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.reports.type</code>.
     */
    public Short getType() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>public.reports.filter</code>.
     */
    public ReportsRecord setFilter(JSONB value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.reports.filter</code>.
     */
    public JSONB getFilter() {
        return (JSONB) get(3);
    }

    /**
     * Setter for <code>public.reports.lang</code>.
     */
    public ReportsRecord setLang(JSONB value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.reports.lang</code>.
     */
    public JSONB getLang() {
        return (JSONB) get(4);
    }

    /**
     * Setter for <code>public.reports.user_id</code>.
     */
    public ReportsRecord setUserId(Integer value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.reports.user_id</code>.
     */
    public Integer getUserId() {
        return (Integer) get(5);
    }

    /**
     * Setter for <code>public.reports.file_id</code>.
     */
    public ReportsRecord setFileId(String value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.reports.file_id</code>.
     */
    public String getFileId() {
        return (String) get(6);
    }

    /**
     * Setter for <code>public.reports.id</code>.
     */
    public ReportsRecord setId(Long value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.reports.id</code>.
     */
    public Long getId() {
        return (Long) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, Short, Short, JSONB, JSONB, Integer, String, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<String, Short, Short, JSONB, JSONB, Integer, String, Long> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Reports.REPORTS.DESCRIPTION;
    }

    @Override
    public Field<Short> field2() {
        return Reports.REPORTS.STATUS;
    }

    @Override
    public Field<Short> field3() {
        return Reports.REPORTS.TYPE;
    }

    @Override
    public Field<JSONB> field4() {
        return Reports.REPORTS.FILTER;
    }

    @Override
    public Field<JSONB> field5() {
        return Reports.REPORTS.LANG;
    }

    @Override
    public Field<Integer> field6() {
        return Reports.REPORTS.USER_ID;
    }

    @Override
    public Field<String> field7() {
        return Reports.REPORTS.FILE_ID;
    }

    @Override
    public Field<Long> field8() {
        return Reports.REPORTS.ID;
    }

    @Override
    public String component1() {
        return getDescription();
    }

    @Override
    public Short component2() {
        return getStatus();
    }

    @Override
    public Short component3() {
        return getType();
    }

    @Override
    public JSONB component4() {
        return getFilter();
    }

    @Override
    public JSONB component5() {
        return getLang();
    }

    @Override
    public Integer component6() {
        return getUserId();
    }

    @Override
    public String component7() {
        return getFileId();
    }

    @Override
    public Long component8() {
        return getId();
    }

    @Override
    public String value1() {
        return getDescription();
    }

    @Override
    public Short value2() {
        return getStatus();
    }

    @Override
    public Short value3() {
        return getType();
    }

    @Override
    public JSONB value4() {
        return getFilter();
    }

    @Override
    public JSONB value5() {
        return getLang();
    }

    @Override
    public Integer value6() {
        return getUserId();
    }

    @Override
    public String value7() {
        return getFileId();
    }

    @Override
    public Long value8() {
        return getId();
    }

    @Override
    public ReportsRecord value1(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public ReportsRecord value2(Short value) {
        setStatus(value);
        return this;
    }

    @Override
    public ReportsRecord value3(Short value) {
        setType(value);
        return this;
    }

    @Override
    public ReportsRecord value4(JSONB value) {
        setFilter(value);
        return this;
    }

    @Override
    public ReportsRecord value5(JSONB value) {
        setLang(value);
        return this;
    }

    @Override
    public ReportsRecord value6(Integer value) {
        setUserId(value);
        return this;
    }

    @Override
    public ReportsRecord value7(String value) {
        setFileId(value);
        return this;
    }

    @Override
    public ReportsRecord value8(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ReportsRecord values(String value1, Short value2, Short value3, JSONB value4, JSONB value5, Integer value6, String value7, Long value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ReportsRecord
     */
    public ReportsRecord() {
        super(Reports.REPORTS);
    }

    /**
     * Create a detached, initialised ReportsRecord
     */
    public ReportsRecord(String description, Short status, Short type, JSONB filter, JSONB lang, Integer userId, String fileId, Long id) {
        super(Reports.REPORTS);

        setDescription(description);
        setStatus(status);
        setType(type);
        setFilter(filter);
        setLang(lang);
        setUserId(userId);
        setFileId(fileId);
        setId(id);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ReportsRecord
     */
    public ReportsRecord(app.finwave.backend.jooq.tables.pojos.Reports value) {
        super(Reports.REPORTS);

        if (value != null) {
            setDescription(value.getDescription());
            setStatus(value.getStatus());
            setType(value.getType());
            setFilter(value.getFilter());
            setLang(value.getLang());
            setUserId(value.getUserId());
            setFileId(value.getFileId());
            setId(value.getId());
            resetChangedOnNotNull();
        }
    }
}
