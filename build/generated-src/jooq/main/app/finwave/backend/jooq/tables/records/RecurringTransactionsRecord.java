/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables.records;


import app.finwave.backend.jooq.tables.RecurringTransactions;

import java.math.BigDecimal;
import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecurringTransactionsRecord extends UpdatableRecordImpl<RecurringTransactionsRecord> implements Record12<Long, Integer, Long, Long, Long, OffsetDateTime, OffsetDateTime, Short, Short, Short, BigDecimal, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.recurring_transactions.id</code>.
     */
    public RecurringTransactionsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.recurring_transactions.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.recurring_transactions.owner_id</code>.
     */
    public RecurringTransactionsRecord setOwnerId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.recurring_transactions.owner_id</code>.
     */
    public Integer getOwnerId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.recurring_transactions.category_id</code>.
     */
    public RecurringTransactionsRecord setCategoryId(Long value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.recurring_transactions.category_id</code>.
     */
    public Long getCategoryId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.recurring_transactions.account_id</code>.
     */
    public RecurringTransactionsRecord setAccountId(Long value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.recurring_transactions.account_id</code>.
     */
    public Long getAccountId() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>public.recurring_transactions.currency_id</code>.
     */
    public RecurringTransactionsRecord setCurrencyId(Long value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.recurring_transactions.currency_id</code>.
     */
    public Long getCurrencyId() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.recurring_transactions.last_repeat</code>.
     */
    public RecurringTransactionsRecord setLastRepeat(OffsetDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.recurring_transactions.last_repeat</code>.
     */
    public OffsetDateTime getLastRepeat() {
        return (OffsetDateTime) get(5);
    }

    /**
     * Setter for <code>public.recurring_transactions.next_repeat</code>.
     */
    public RecurringTransactionsRecord setNextRepeat(OffsetDateTime value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.recurring_transactions.next_repeat</code>.
     */
    public OffsetDateTime getNextRepeat() {
        return (OffsetDateTime) get(6);
    }

    /**
     * Setter for <code>public.recurring_transactions.repeat_func</code>.
     */
    public RecurringTransactionsRecord setRepeatFunc(Short value) {
        set(7, value);
        return this;
    }

    /**
     * Getter for <code>public.recurring_transactions.repeat_func</code>.
     */
    public Short getRepeatFunc() {
        return (Short) get(7);
    }

    /**
     * Setter for <code>public.recurring_transactions.repeat_func_arg</code>.
     */
    public RecurringTransactionsRecord setRepeatFuncArg(Short value) {
        set(8, value);
        return this;
    }

    /**
     * Getter for <code>public.recurring_transactions.repeat_func_arg</code>.
     */
    public Short getRepeatFuncArg() {
        return (Short) get(8);
    }

    /**
     * Setter for <code>public.recurring_transactions.notification_mode</code>.
     */
    public RecurringTransactionsRecord setNotificationMode(Short value) {
        set(9, value);
        return this;
    }

    /**
     * Getter for <code>public.recurring_transactions.notification_mode</code>.
     */
    public Short getNotificationMode() {
        return (Short) get(9);
    }

    /**
     * Setter for <code>public.recurring_transactions.delta</code>.
     */
    public RecurringTransactionsRecord setDelta(BigDecimal value) {
        set(10, value);
        return this;
    }

    /**
     * Getter for <code>public.recurring_transactions.delta</code>.
     */
    public BigDecimal getDelta() {
        return (BigDecimal) get(10);
    }

    /**
     * Setter for <code>public.recurring_transactions.description</code>.
     */
    public RecurringTransactionsRecord setDescription(String value) {
        set(11, value);
        return this;
    }

    /**
     * Getter for <code>public.recurring_transactions.description</code>.
     */
    public String getDescription() {
        return (String) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row12<Long, Integer, Long, Long, Long, OffsetDateTime, OffsetDateTime, Short, Short, Short, BigDecimal, String> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    @Override
    public Row12<Long, Integer, Long, Long, Long, OffsetDateTime, OffsetDateTime, Short, Short, Short, BigDecimal, String> valuesRow() {
        return (Row12) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return RecurringTransactions.RECURRING_TRANSACTIONS.ID;
    }

    @Override
    public Field<Integer> field2() {
        return RecurringTransactions.RECURRING_TRANSACTIONS.OWNER_ID;
    }

    @Override
    public Field<Long> field3() {
        return RecurringTransactions.RECURRING_TRANSACTIONS.CATEGORY_ID;
    }

    @Override
    public Field<Long> field4() {
        return RecurringTransactions.RECURRING_TRANSACTIONS.ACCOUNT_ID;
    }

    @Override
    public Field<Long> field5() {
        return RecurringTransactions.RECURRING_TRANSACTIONS.CURRENCY_ID;
    }

    @Override
    public Field<OffsetDateTime> field6() {
        return RecurringTransactions.RECURRING_TRANSACTIONS.LAST_REPEAT;
    }

    @Override
    public Field<OffsetDateTime> field7() {
        return RecurringTransactions.RECURRING_TRANSACTIONS.NEXT_REPEAT;
    }

    @Override
    public Field<Short> field8() {
        return RecurringTransactions.RECURRING_TRANSACTIONS.REPEAT_FUNC;
    }

    @Override
    public Field<Short> field9() {
        return RecurringTransactions.RECURRING_TRANSACTIONS.REPEAT_FUNC_ARG;
    }

    @Override
    public Field<Short> field10() {
        return RecurringTransactions.RECURRING_TRANSACTIONS.NOTIFICATION_MODE;
    }

    @Override
    public Field<BigDecimal> field11() {
        return RecurringTransactions.RECURRING_TRANSACTIONS.DELTA;
    }

    @Override
    public Field<String> field12() {
        return RecurringTransactions.RECURRING_TRANSACTIONS.DESCRIPTION;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getOwnerId();
    }

    @Override
    public Long component3() {
        return getCategoryId();
    }

    @Override
    public Long component4() {
        return getAccountId();
    }

    @Override
    public Long component5() {
        return getCurrencyId();
    }

    @Override
    public OffsetDateTime component6() {
        return getLastRepeat();
    }

    @Override
    public OffsetDateTime component7() {
        return getNextRepeat();
    }

    @Override
    public Short component8() {
        return getRepeatFunc();
    }

    @Override
    public Short component9() {
        return getRepeatFuncArg();
    }

    @Override
    public Short component10() {
        return getNotificationMode();
    }

    @Override
    public BigDecimal component11() {
        return getDelta();
    }

    @Override
    public String component12() {
        return getDescription();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getOwnerId();
    }

    @Override
    public Long value3() {
        return getCategoryId();
    }

    @Override
    public Long value4() {
        return getAccountId();
    }

    @Override
    public Long value5() {
        return getCurrencyId();
    }

    @Override
    public OffsetDateTime value6() {
        return getLastRepeat();
    }

    @Override
    public OffsetDateTime value7() {
        return getNextRepeat();
    }

    @Override
    public Short value8() {
        return getRepeatFunc();
    }

    @Override
    public Short value9() {
        return getRepeatFuncArg();
    }

    @Override
    public Short value10() {
        return getNotificationMode();
    }

    @Override
    public BigDecimal value11() {
        return getDelta();
    }

    @Override
    public String value12() {
        return getDescription();
    }

    @Override
    public RecurringTransactionsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public RecurringTransactionsRecord value2(Integer value) {
        setOwnerId(value);
        return this;
    }

    @Override
    public RecurringTransactionsRecord value3(Long value) {
        setCategoryId(value);
        return this;
    }

    @Override
    public RecurringTransactionsRecord value4(Long value) {
        setAccountId(value);
        return this;
    }

    @Override
    public RecurringTransactionsRecord value5(Long value) {
        setCurrencyId(value);
        return this;
    }

    @Override
    public RecurringTransactionsRecord value6(OffsetDateTime value) {
        setLastRepeat(value);
        return this;
    }

    @Override
    public RecurringTransactionsRecord value7(OffsetDateTime value) {
        setNextRepeat(value);
        return this;
    }

    @Override
    public RecurringTransactionsRecord value8(Short value) {
        setRepeatFunc(value);
        return this;
    }

    @Override
    public RecurringTransactionsRecord value9(Short value) {
        setRepeatFuncArg(value);
        return this;
    }

    @Override
    public RecurringTransactionsRecord value10(Short value) {
        setNotificationMode(value);
        return this;
    }

    @Override
    public RecurringTransactionsRecord value11(BigDecimal value) {
        setDelta(value);
        return this;
    }

    @Override
    public RecurringTransactionsRecord value12(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public RecurringTransactionsRecord values(Long value1, Integer value2, Long value3, Long value4, Long value5, OffsetDateTime value6, OffsetDateTime value7, Short value8, Short value9, Short value10, BigDecimal value11, String value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RecurringTransactionsRecord
     */
    public RecurringTransactionsRecord() {
        super(RecurringTransactions.RECURRING_TRANSACTIONS);
    }

    /**
     * Create a detached, initialised RecurringTransactionsRecord
     */
    public RecurringTransactionsRecord(Long id, Integer ownerId, Long categoryId, Long accountId, Long currencyId, OffsetDateTime lastRepeat, OffsetDateTime nextRepeat, Short repeatFunc, Short repeatFuncArg, Short notificationMode, BigDecimal delta, String description) {
        super(RecurringTransactions.RECURRING_TRANSACTIONS);

        setId(id);
        setOwnerId(ownerId);
        setCategoryId(categoryId);
        setAccountId(accountId);
        setCurrencyId(currencyId);
        setLastRepeat(lastRepeat);
        setNextRepeat(nextRepeat);
        setRepeatFunc(repeatFunc);
        setRepeatFuncArg(repeatFuncArg);
        setNotificationMode(notificationMode);
        setDelta(delta);
        setDescription(description);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised RecurringTransactionsRecord
     */
    public RecurringTransactionsRecord(app.finwave.backend.jooq.tables.pojos.RecurringTransactions value) {
        super(RecurringTransactions.RECURRING_TRANSACTIONS);

        if (value != null) {
            setId(value.getId());
            setOwnerId(value.getOwnerId());
            setCategoryId(value.getCategoryId());
            setAccountId(value.getAccountId());
            setCurrencyId(value.getCurrencyId());
            setLastRepeat(value.getLastRepeat());
            setNextRepeat(value.getNextRepeat());
            setRepeatFunc(value.getRepeatFunc());
            setRepeatFuncArg(value.getRepeatFuncArg());
            setNotificationMode(value.getNotificationMode());
            setDelta(value.getDelta());
            setDescription(value.getDescription());
            resetChangedOnNotNull();
        }
    }
}
