/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables;


import app.finwave.backend.jooq.Indexes;
import app.finwave.backend.jooq.Keys;
import app.finwave.backend.jooq.Public;
import app.finwave.backend.jooq.tables.records.CategoriesBudgetsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CategoriesBudgets extends TableImpl<CategoriesBudgetsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.categories_budgets</code>
     */
    public static final CategoriesBudgets CATEGORIES_BUDGETS = new CategoriesBudgets();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CategoriesBudgetsRecord> getRecordType() {
        return CategoriesBudgetsRecord.class;
    }

    /**
     * The column <code>public.categories_budgets.id</code>.
     */
    public final TableField<CategoriesBudgetsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.categories_budgets.owner_id</code>.
     */
    public final TableField<CategoriesBudgetsRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.categories_budgets.category_id</code>.
     */
    public final TableField<CategoriesBudgetsRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.categories_budgets.date_type</code>.
     */
    public final TableField<CategoriesBudgetsRecord, Short> DATE_TYPE = createField(DSL.name("date_type"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.categories_budgets.currency_id</code>.
     */
    public final TableField<CategoriesBudgetsRecord, Long> CURRENCY_ID = createField(DSL.name("currency_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.categories_budgets.amount</code>.
     */
    public final TableField<CategoriesBudgetsRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC.nullable(false), this, "");

    private CategoriesBudgets(Name alias, Table<CategoriesBudgetsRecord> aliased) {
        this(alias, aliased, null);
    }

    private CategoriesBudgets(Name alias, Table<CategoriesBudgetsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.categories_budgets</code> table reference
     */
    public CategoriesBudgets(String alias) {
        this(DSL.name(alias), CATEGORIES_BUDGETS);
    }

    /**
     * Create an aliased <code>public.categories_budgets</code> table reference
     */
    public CategoriesBudgets(Name alias) {
        this(alias, CATEGORIES_BUDGETS);
    }

    /**
     * Create a <code>public.categories_budgets</code> table reference
     */
    public CategoriesBudgets() {
        this(DSL.name("categories_budgets"), null);
    }

    public <O extends Record> CategoriesBudgets(Table<O> child, ForeignKey<O, CategoriesBudgetsRecord> key) {
        super(child, key, CATEGORIES_BUDGETS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TRANSACTIONS_TAGS_MANAGEMENT);
    }

    @Override
    public Identity<CategoriesBudgetsRecord, Long> getIdentity() {
        return (Identity<CategoriesBudgetsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CategoriesBudgetsRecord> getPrimaryKey() {
        return Keys.TRANSACTIONS_TAGS_MANAGEMENT_PKEY;
    }

    @Override
    public List<ForeignKey<CategoriesBudgetsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CATEGORIES_BUDGETS__TRANSACTIONS_TAGS_MANAGEMENT_OWNER_ID_FKEY, Keys.CATEGORIES_BUDGETS__TRANSACTIONS_TAGS_MANAGEMENT_TAG_ID_FKEY, Keys.CATEGORIES_BUDGETS__TRANSACTIONS_TAGS_MANAGEMENT_CURRENCY_ID_FKEY);
    }

    private transient Users _users;
    private transient Categories _categories;
    private transient Currencies _currencies;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.CATEGORIES_BUDGETS__TRANSACTIONS_TAGS_MANAGEMENT_OWNER_ID_FKEY);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>public.categories</code> table.
     */
    public Categories categories() {
        if (_categories == null)
            _categories = new Categories(this, Keys.CATEGORIES_BUDGETS__TRANSACTIONS_TAGS_MANAGEMENT_TAG_ID_FKEY);

        return _categories;
    }

    /**
     * Get the implicit join path to the <code>public.currencies</code> table.
     */
    public Currencies currencies() {
        if (_currencies == null)
            _currencies = new Currencies(this, Keys.CATEGORIES_BUDGETS__TRANSACTIONS_TAGS_MANAGEMENT_CURRENCY_ID_FKEY);

        return _currencies;
    }

    @Override
    public CategoriesBudgets as(String alias) {
        return new CategoriesBudgets(DSL.name(alias), this);
    }

    @Override
    public CategoriesBudgets as(Name alias) {
        return new CategoriesBudgets(alias, this);
    }

    @Override
    public CategoriesBudgets as(Table<?> alias) {
        return new CategoriesBudgets(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoriesBudgets rename(String name) {
        return new CategoriesBudgets(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoriesBudgets rename(Name name) {
        return new CategoriesBudgets(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CategoriesBudgets rename(Table<?> name) {
        return new CategoriesBudgets(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Integer, Long, Short, Long, BigDecimal> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Integer, ? super Long, ? super Short, ? super Long, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Integer, ? super Long, ? super Short, ? super Long, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
