/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables.pojos;


import java.io.Serializable;
import java.time.OffsetDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AiContexts implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final Integer ownerId;
    private final OffsetDateTime createdAt;
    private final Integer completionTokensUsed;
    private final Integer promptTokensUsed;

    public AiContexts(AiContexts value) {
        this.id = value.id;
        this.ownerId = value.ownerId;
        this.createdAt = value.createdAt;
        this.completionTokensUsed = value.completionTokensUsed;
        this.promptTokensUsed = value.promptTokensUsed;
    }

    public AiContexts(
        Long id,
        Integer ownerId,
        OffsetDateTime createdAt,
        Integer completionTokensUsed,
        Integer promptTokensUsed
    ) {
        this.id = id;
        this.ownerId = ownerId;
        this.createdAt = createdAt;
        this.completionTokensUsed = completionTokensUsed;
        this.promptTokensUsed = promptTokensUsed;
    }

    /**
     * Getter for <code>public.ai_contexts.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.ai_contexts.owner_id</code>.
     */
    public Integer getOwnerId() {
        return this.ownerId;
    }

    /**
     * Getter for <code>public.ai_contexts.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for <code>public.ai_contexts.completion_tokens_used</code>.
     */
    public Integer getCompletionTokensUsed() {
        return this.completionTokensUsed;
    }

    /**
     * Getter for <code>public.ai_contexts.prompt_tokens_used</code>.
     */
    public Integer getPromptTokensUsed() {
        return this.promptTokensUsed;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final AiContexts other = (AiContexts) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.ownerId == null) {
            if (other.ownerId != null)
                return false;
        }
        else if (!this.ownerId.equals(other.ownerId))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.completionTokensUsed == null) {
            if (other.completionTokensUsed != null)
                return false;
        }
        else if (!this.completionTokensUsed.equals(other.completionTokensUsed))
            return false;
        if (this.promptTokensUsed == null) {
            if (other.promptTokensUsed != null)
                return false;
        }
        else if (!this.promptTokensUsed.equals(other.promptTokensUsed))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.ownerId == null) ? 0 : this.ownerId.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.completionTokensUsed == null) ? 0 : this.completionTokensUsed.hashCode());
        result = prime * result + ((this.promptTokensUsed == null) ? 0 : this.promptTokensUsed.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("AiContexts (");

        sb.append(id);
        sb.append(", ").append(ownerId);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(completionTokensUsed);
        sb.append(", ").append(promptTokensUsed);

        sb.append(")");
        return sb.toString();
    }
}
