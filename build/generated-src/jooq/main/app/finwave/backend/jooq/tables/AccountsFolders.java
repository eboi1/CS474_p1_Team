/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables;


import app.finwave.backend.jooq.Keys;
import app.finwave.backend.jooq.Public;
import app.finwave.backend.jooq.tables.records.AccountsFoldersRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountsFolders extends TableImpl<AccountsFoldersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.accounts_folders</code>
     */
    public static final AccountsFolders ACCOUNTS_FOLDERS = new AccountsFolders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsFoldersRecord> getRecordType() {
        return AccountsFoldersRecord.class;
    }

    /**
     * The column <code>public.accounts_folders.id</code>.
     */
    public final TableField<AccountsFoldersRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.accounts_folders.owner_id</code>.
     */
    public final TableField<AccountsFoldersRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.accounts_folders.name</code>.
     */
    public final TableField<AccountsFoldersRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.accounts_folders.description</code>.
     */
    public final TableField<AccountsFoldersRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private AccountsFolders(Name alias, Table<AccountsFoldersRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccountsFolders(Name alias, Table<AccountsFoldersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.accounts_folders</code> table reference
     */
    public AccountsFolders(String alias) {
        this(DSL.name(alias), ACCOUNTS_FOLDERS);
    }

    /**
     * Create an aliased <code>public.accounts_folders</code> table reference
     */
    public AccountsFolders(Name alias) {
        this(alias, ACCOUNTS_FOLDERS);
    }

    /**
     * Create a <code>public.accounts_folders</code> table reference
     */
    public AccountsFolders() {
        this(DSL.name("accounts_folders"), null);
    }

    public <O extends Record> AccountsFolders(Table<O> child, ForeignKey<O, AccountsFoldersRecord> key) {
        super(child, key, ACCOUNTS_FOLDERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AccountsFoldersRecord, Long> getIdentity() {
        return (Identity<AccountsFoldersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccountsFoldersRecord> getPrimaryKey() {
        return Keys.ACCOUNTS_TAGS_PKEY;
    }

    @Override
    public List<ForeignKey<AccountsFoldersRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCOUNTS_FOLDERS__ACCOUNTS_TAGS_OWNER_ID_FKEY);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.ACCOUNTS_FOLDERS__ACCOUNTS_TAGS_OWNER_ID_FKEY);

        return _users;
    }

    @Override
    public AccountsFolders as(String alias) {
        return new AccountsFolders(DSL.name(alias), this);
    }

    @Override
    public AccountsFolders as(Name alias) {
        return new AccountsFolders(alias, this);
    }

    @Override
    public AccountsFolders as(Table<?> alias) {
        return new AccountsFolders(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsFolders rename(String name) {
        return new AccountsFolders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsFolders rename(Name name) {
        return new AccountsFolders(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccountsFolders rename(Table<?> name) {
        return new AccountsFolders(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Integer, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
