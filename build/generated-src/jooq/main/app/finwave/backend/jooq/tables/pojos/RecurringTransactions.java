/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;
import java.time.OffsetDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecurringTransactions implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final Integer ownerId;
    private final Long categoryId;
    private final Long accountId;
    private final Long currencyId;
    private final OffsetDateTime lastRepeat;
    private final OffsetDateTime nextRepeat;
    private final Short repeatFunc;
    private final Short repeatFuncArg;
    private final Short notificationMode;
    private final BigDecimal delta;
    private final String description;

    public RecurringTransactions(RecurringTransactions value) {
        this.id = value.id;
        this.ownerId = value.ownerId;
        this.categoryId = value.categoryId;
        this.accountId = value.accountId;
        this.currencyId = value.currencyId;
        this.lastRepeat = value.lastRepeat;
        this.nextRepeat = value.nextRepeat;
        this.repeatFunc = value.repeatFunc;
        this.repeatFuncArg = value.repeatFuncArg;
        this.notificationMode = value.notificationMode;
        this.delta = value.delta;
        this.description = value.description;
    }

    public RecurringTransactions(
        Long id,
        Integer ownerId,
        Long categoryId,
        Long accountId,
        Long currencyId,
        OffsetDateTime lastRepeat,
        OffsetDateTime nextRepeat,
        Short repeatFunc,
        Short repeatFuncArg,
        Short notificationMode,
        BigDecimal delta,
        String description
    ) {
        this.id = id;
        this.ownerId = ownerId;
        this.categoryId = categoryId;
        this.accountId = accountId;
        this.currencyId = currencyId;
        this.lastRepeat = lastRepeat;
        this.nextRepeat = nextRepeat;
        this.repeatFunc = repeatFunc;
        this.repeatFuncArg = repeatFuncArg;
        this.notificationMode = notificationMode;
        this.delta = delta;
        this.description = description;
    }

    /**
     * Getter for <code>public.recurring_transactions.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.recurring_transactions.owner_id</code>.
     */
    public Integer getOwnerId() {
        return this.ownerId;
    }

    /**
     * Getter for <code>public.recurring_transactions.category_id</code>.
     */
    public Long getCategoryId() {
        return this.categoryId;
    }

    /**
     * Getter for <code>public.recurring_transactions.account_id</code>.
     */
    public Long getAccountId() {
        return this.accountId;
    }

    /**
     * Getter for <code>public.recurring_transactions.currency_id</code>.
     */
    public Long getCurrencyId() {
        return this.currencyId;
    }

    /**
     * Getter for <code>public.recurring_transactions.last_repeat</code>.
     */
    public OffsetDateTime getLastRepeat() {
        return this.lastRepeat;
    }

    /**
     * Getter for <code>public.recurring_transactions.next_repeat</code>.
     */
    public OffsetDateTime getNextRepeat() {
        return this.nextRepeat;
    }

    /**
     * Getter for <code>public.recurring_transactions.repeat_func</code>.
     */
    public Short getRepeatFunc() {
        return this.repeatFunc;
    }

    /**
     * Getter for <code>public.recurring_transactions.repeat_func_arg</code>.
     */
    public Short getRepeatFuncArg() {
        return this.repeatFuncArg;
    }

    /**
     * Getter for <code>public.recurring_transactions.notification_mode</code>.
     */
    public Short getNotificationMode() {
        return this.notificationMode;
    }

    /**
     * Getter for <code>public.recurring_transactions.delta</code>.
     */
    public BigDecimal getDelta() {
        return this.delta;
    }

    /**
     * Getter for <code>public.recurring_transactions.description</code>.
     */
    public String getDescription() {
        return this.description;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final RecurringTransactions other = (RecurringTransactions) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.ownerId == null) {
            if (other.ownerId != null)
                return false;
        }
        else if (!this.ownerId.equals(other.ownerId))
            return false;
        if (this.categoryId == null) {
            if (other.categoryId != null)
                return false;
        }
        else if (!this.categoryId.equals(other.categoryId))
            return false;
        if (this.accountId == null) {
            if (other.accountId != null)
                return false;
        }
        else if (!this.accountId.equals(other.accountId))
            return false;
        if (this.currencyId == null) {
            if (other.currencyId != null)
                return false;
        }
        else if (!this.currencyId.equals(other.currencyId))
            return false;
        if (this.lastRepeat == null) {
            if (other.lastRepeat != null)
                return false;
        }
        else if (!this.lastRepeat.equals(other.lastRepeat))
            return false;
        if (this.nextRepeat == null) {
            if (other.nextRepeat != null)
                return false;
        }
        else if (!this.nextRepeat.equals(other.nextRepeat))
            return false;
        if (this.repeatFunc == null) {
            if (other.repeatFunc != null)
                return false;
        }
        else if (!this.repeatFunc.equals(other.repeatFunc))
            return false;
        if (this.repeatFuncArg == null) {
            if (other.repeatFuncArg != null)
                return false;
        }
        else if (!this.repeatFuncArg.equals(other.repeatFuncArg))
            return false;
        if (this.notificationMode == null) {
            if (other.notificationMode != null)
                return false;
        }
        else if (!this.notificationMode.equals(other.notificationMode))
            return false;
        if (this.delta == null) {
            if (other.delta != null)
                return false;
        }
        else if (!this.delta.equals(other.delta))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.ownerId == null) ? 0 : this.ownerId.hashCode());
        result = prime * result + ((this.categoryId == null) ? 0 : this.categoryId.hashCode());
        result = prime * result + ((this.accountId == null) ? 0 : this.accountId.hashCode());
        result = prime * result + ((this.currencyId == null) ? 0 : this.currencyId.hashCode());
        result = prime * result + ((this.lastRepeat == null) ? 0 : this.lastRepeat.hashCode());
        result = prime * result + ((this.nextRepeat == null) ? 0 : this.nextRepeat.hashCode());
        result = prime * result + ((this.repeatFunc == null) ? 0 : this.repeatFunc.hashCode());
        result = prime * result + ((this.repeatFuncArg == null) ? 0 : this.repeatFuncArg.hashCode());
        result = prime * result + ((this.notificationMode == null) ? 0 : this.notificationMode.hashCode());
        result = prime * result + ((this.delta == null) ? 0 : this.delta.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("RecurringTransactions (");

        sb.append(id);
        sb.append(", ").append(ownerId);
        sb.append(", ").append(categoryId);
        sb.append(", ").append(accountId);
        sb.append(", ").append(currencyId);
        sb.append(", ").append(lastRepeat);
        sb.append(", ").append(nextRepeat);
        sb.append(", ").append(repeatFunc);
        sb.append(", ").append(repeatFuncArg);
        sb.append(", ").append(notificationMode);
        sb.append(", ").append(delta);
        sb.append(", ").append(description);

        sb.append(")");
        return sb.toString();
    }
}
