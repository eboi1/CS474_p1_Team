/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables;


import app.finwave.backend.jooq.Keys;
import app.finwave.backend.jooq.Public;
import app.finwave.backend.jooq.tables.records.AccountsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Accounts extends TableImpl<AccountsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.accounts</code>
     */
    public static final Accounts ACCOUNTS = new Accounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountsRecord> getRecordType() {
        return AccountsRecord.class;
    }

    /**
     * The column <code>public.accounts.id</code>.
     */
    public final TableField<AccountsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.accounts.owner_id</code>.
     */
    public final TableField<AccountsRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.accounts.folder_id</code>.
     */
    public final TableField<AccountsRecord, Long> FOLDER_ID = createField(DSL.name("folder_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.accounts.currency_id</code>.
     */
    public final TableField<AccountsRecord, Long> CURRENCY_ID = createField(DSL.name("currency_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.accounts.amount</code>.
     */
    public final TableField<AccountsRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.accounts.hidden</code>.
     */
    public final TableField<AccountsRecord, Boolean> HIDDEN = createField(DSL.name("hidden"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.accounts.name</code>.
     */
    public final TableField<AccountsRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.accounts.description</code>.
     */
    public final TableField<AccountsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    private Accounts(Name alias, Table<AccountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Accounts(Name alias, Table<AccountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.accounts</code> table reference
     */
    public Accounts(String alias) {
        this(DSL.name(alias), ACCOUNTS);
    }

    /**
     * Create an aliased <code>public.accounts</code> table reference
     */
    public Accounts(Name alias) {
        this(alias, ACCOUNTS);
    }

    /**
     * Create a <code>public.accounts</code> table reference
     */
    public Accounts() {
        this(DSL.name("accounts"), null);
    }

    public <O extends Record> Accounts(Table<O> child, ForeignKey<O, AccountsRecord> key) {
        super(child, key, ACCOUNTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AccountsRecord, Long> getIdentity() {
        return (Identity<AccountsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AccountsRecord> getPrimaryKey() {
        return Keys.ACCOUNTS_PKEY;
    }

    @Override
    public List<ForeignKey<AccountsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCOUNTS__ACCOUNTS_OWNER_ID_FKEY, Keys.ACCOUNTS__ACCOUNTS_TAG_ID_FKEY, Keys.ACCOUNTS__ACCOUNTS_CURRENCY_ID_FKEY);
    }

    private transient Users _users;
    private transient AccountsFolders _accountsFolders;
    private transient Currencies _currencies;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.ACCOUNTS__ACCOUNTS_OWNER_ID_FKEY);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>public.accounts_folders</code>
     * table.
     */
    public AccountsFolders accountsFolders() {
        if (_accountsFolders == null)
            _accountsFolders = new AccountsFolders(this, Keys.ACCOUNTS__ACCOUNTS_TAG_ID_FKEY);

        return _accountsFolders;
    }

    /**
     * Get the implicit join path to the <code>public.currencies</code> table.
     */
    public Currencies currencies() {
        if (_currencies == null)
            _currencies = new Currencies(this, Keys.ACCOUNTS__ACCOUNTS_CURRENCY_ID_FKEY);

        return _currencies;
    }

    @Override
    public Accounts as(String alias) {
        return new Accounts(DSL.name(alias), this);
    }

    @Override
    public Accounts as(Name alias) {
        return new Accounts(alias, this);
    }

    @Override
    public Accounts as(Table<?> alias) {
        return new Accounts(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(String name) {
        return new Accounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(Name name) {
        return new Accounts(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Accounts rename(Table<?> name) {
        return new Accounts(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Integer, Long, Long, BigDecimal, Boolean, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super Integer, ? super Long, ? super Long, ? super BigDecimal, ? super Boolean, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super Integer, ? super Long, ? super Long, ? super BigDecimal, ? super Boolean, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
