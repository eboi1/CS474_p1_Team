/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables;


import app.finwave.backend.jooq.Indexes;
import app.finwave.backend.jooq.Keys;
import app.finwave.backend.jooq.Public;
import app.finwave.backend.jooq.tables.records.InternalTransactionsMetadataRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InternalTransactionsMetadata extends TableImpl<InternalTransactionsMetadataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of
     * <code>public.internal_transactions_metadata</code>
     */
    public static final InternalTransactionsMetadata INTERNAL_TRANSACTIONS_METADATA = new InternalTransactionsMetadata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InternalTransactionsMetadataRecord> getRecordType() {
        return InternalTransactionsMetadataRecord.class;
    }

    /**
     * The column <code>public.internal_transactions_metadata.id</code>.
     */
    public final TableField<InternalTransactionsMetadataRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column
     * <code>public.internal_transactions_metadata.from_transaction_id</code>.
     */
    public final TableField<InternalTransactionsMetadataRecord, Long> FROM_TRANSACTION_ID = createField(DSL.name("from_transaction_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column
     * <code>public.internal_transactions_metadata.to_transaction_id</code>.
     */
    public final TableField<InternalTransactionsMetadataRecord, Long> TO_TRANSACTION_ID = createField(DSL.name("to_transaction_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private InternalTransactionsMetadata(Name alias, Table<InternalTransactionsMetadataRecord> aliased) {
        this(alias, aliased, null);
    }

    private InternalTransactionsMetadata(Name alias, Table<InternalTransactionsMetadataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.internal_transactions_metadata</code>
     * table reference
     */
    public InternalTransactionsMetadata(String alias) {
        this(DSL.name(alias), INTERNAL_TRANSACTIONS_METADATA);
    }

    /**
     * Create an aliased <code>public.internal_transactions_metadata</code>
     * table reference
     */
    public InternalTransactionsMetadata(Name alias) {
        this(alias, INTERNAL_TRANSACTIONS_METADATA);
    }

    /**
     * Create a <code>public.internal_transactions_metadata</code> table
     * reference
     */
    public InternalTransactionsMetadata() {
        this(DSL.name("internal_transactions_metadata"), null);
    }

    public <O extends Record> InternalTransactionsMetadata(Table<O> child, ForeignKey<O, InternalTransactionsMetadataRecord> key) {
        super(child, key, INTERNAL_TRANSACTIONS_METADATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_INTERNAL_TRANSACTIONS_METADATA);
    }

    @Override
    public Identity<InternalTransactionsMetadataRecord, Long> getIdentity() {
        return (Identity<InternalTransactionsMetadataRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<InternalTransactionsMetadataRecord> getPrimaryKey() {
        return Keys.INTERNAL_TRANSFERS_PKEY;
    }

    @Override
    public List<ForeignKey<InternalTransactionsMetadataRecord, ?>> getReferences() {
        return Arrays.asList(Keys.INTERNAL_TRANSACTIONS_METADATA__INTERNAL_TRANSFERS_FROM_TRANSACTION_ID_FKEY, Keys.INTERNAL_TRANSACTIONS_METADATA__INTERNAL_TRANSFERS_TO_TRANSACTION_ID_FKEY);
    }

    private transient Transactions _internalTransfersFromTransactionIdFkey;
    private transient Transactions _internalTransfersToTransactionIdFkey;

    /**
     * Get the implicit join path to the <code>public.transactions</code> table,
     * via the <code>internal_transfers_from_transaction_id_fkey</code> key.
     */
    public Transactions internalTransfersFromTransactionIdFkey() {
        if (_internalTransfersFromTransactionIdFkey == null)
            _internalTransfersFromTransactionIdFkey = new Transactions(this, Keys.INTERNAL_TRANSACTIONS_METADATA__INTERNAL_TRANSFERS_FROM_TRANSACTION_ID_FKEY);

        return _internalTransfersFromTransactionIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.transactions</code> table,
     * via the <code>internal_transfers_to_transaction_id_fkey</code> key.
     */
    public Transactions internalTransfersToTransactionIdFkey() {
        if (_internalTransfersToTransactionIdFkey == null)
            _internalTransfersToTransactionIdFkey = new Transactions(this, Keys.INTERNAL_TRANSACTIONS_METADATA__INTERNAL_TRANSFERS_TO_TRANSACTION_ID_FKEY);

        return _internalTransfersToTransactionIdFkey;
    }

    @Override
    public InternalTransactionsMetadata as(String alias) {
        return new InternalTransactionsMetadata(DSL.name(alias), this);
    }

    @Override
    public InternalTransactionsMetadata as(Name alias) {
        return new InternalTransactionsMetadata(alias, this);
    }

    @Override
    public InternalTransactionsMetadata as(Table<?> alias) {
        return new InternalTransactionsMetadata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public InternalTransactionsMetadata rename(String name) {
        return new InternalTransactionsMetadata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InternalTransactionsMetadata rename(Name name) {
        return new InternalTransactionsMetadata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public InternalTransactionsMetadata rename(Table<?> name) {
        return new InternalTransactionsMetadata(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
