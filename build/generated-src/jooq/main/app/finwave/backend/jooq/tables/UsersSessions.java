/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables;


import app.finwave.backend.jooq.Indexes;
import app.finwave.backend.jooq.Keys;
import app.finwave.backend.jooq.Public;
import app.finwave.backend.jooq.tables.records.UsersSessionsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersSessions extends TableImpl<UsersSessionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users_sessions</code>
     */
    public static final UsersSessions USERS_SESSIONS = new UsersSessions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersSessionsRecord> getRecordType() {
        return UsersSessionsRecord.class;
    }

    /**
     * The column <code>public.users_sessions.id</code>.
     */
    public final TableField<UsersSessionsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.users_sessions.user_id</code>.
     */
    public final TableField<UsersSessionsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.users_sessions.token</code>.
     */
    public final TableField<UsersSessionsRecord, String> TOKEN = createField(DSL.name("token"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.users_sessions.created_at</code>.
     */
    public final TableField<UsersSessionsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.users_sessions.expires_at</code>.
     */
    public final TableField<UsersSessionsRecord, LocalDateTime> EXPIRES_AT = createField(DSL.name("expires_at"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>public.users_sessions.description</code>.
     */
    public final TableField<UsersSessionsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.users_sessions.limited</code>.
     */
    public final TableField<UsersSessionsRecord, Boolean> LIMITED = createField(DSL.name("limited"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "");

    private UsersSessions(Name alias, Table<UsersSessionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersSessions(Name alias, Table<UsersSessionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.users_sessions</code> table reference
     */
    public UsersSessions(String alias) {
        this(DSL.name(alias), USERS_SESSIONS);
    }

    /**
     * Create an aliased <code>public.users_sessions</code> table reference
     */
    public UsersSessions(Name alias) {
        this(alias, USERS_SESSIONS);
    }

    /**
     * Create a <code>public.users_sessions</code> table reference
     */
    public UsersSessions() {
        this(DSL.name("users_sessions"), null);
    }

    public <O extends Record> UsersSessions(Table<O> child, ForeignKey<O, UsersSessionsRecord> key) {
        super(child, key, USERS_SESSIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_USERS_SESSIONS);
    }

    @Override
    public Identity<UsersSessionsRecord, Long> getIdentity() {
        return (Identity<UsersSessionsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UsersSessionsRecord> getPrimaryKey() {
        return Keys.USERS_SESSIONS_PKEY;
    }

    @Override
    public List<UniqueKey<UsersSessionsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USERS_SESSIONS_TOKEN_KEY);
    }

    @Override
    public List<ForeignKey<UsersSessionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USERS_SESSIONS__USERS_SESSIONS_USER_ID_FKEY);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.USERS_SESSIONS__USERS_SESSIONS_USER_ID_FKEY);

        return _users;
    }

    @Override
    public UsersSessions as(String alias) {
        return new UsersSessions(DSL.name(alias), this);
    }

    @Override
    public UsersSessions as(Name alias) {
        return new UsersSessions(alias, this);
    }

    @Override
    public UsersSessions as(Table<?> alias) {
        return new UsersSessions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersSessions rename(String name) {
        return new UsersSessions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersSessions rename(Name name) {
        return new UsersSessions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersSessions rename(Table<?> name) {
        return new UsersSessions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Integer, String, LocalDateTime, LocalDateTime, String, Boolean> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super Integer, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super Integer, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? super String, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
