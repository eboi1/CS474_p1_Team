/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables.records;


import app.finwave.backend.jooq.tables.AiContexts;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AiContextsRecord extends UpdatableRecordImpl<AiContextsRecord> implements Record5<Long, Integer, OffsetDateTime, Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.ai_contexts.id</code>.
     */
    public AiContextsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.ai_contexts.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.ai_contexts.owner_id</code>.
     */
    public AiContextsRecord setOwnerId(Integer value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.ai_contexts.owner_id</code>.
     */
    public Integer getOwnerId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.ai_contexts.created_at</code>.
     */
    public AiContextsRecord setCreatedAt(OffsetDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.ai_contexts.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>public.ai_contexts.completion_tokens_used</code>.
     */
    public AiContextsRecord setCompletionTokensUsed(Integer value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.ai_contexts.completion_tokens_used</code>.
     */
    public Integer getCompletionTokensUsed() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.ai_contexts.prompt_tokens_used</code>.
     */
    public AiContextsRecord setPromptTokensUsed(Integer value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.ai_contexts.prompt_tokens_used</code>.
     */
    public Integer getPromptTokensUsed() {
        return (Integer) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Integer, OffsetDateTime, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, Integer, OffsetDateTime, Integer, Integer> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return AiContexts.AI_CONTEXTS.ID;
    }

    @Override
    public Field<Integer> field2() {
        return AiContexts.AI_CONTEXTS.OWNER_ID;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return AiContexts.AI_CONTEXTS.CREATED_AT;
    }

    @Override
    public Field<Integer> field4() {
        return AiContexts.AI_CONTEXTS.COMPLETION_TOKENS_USED;
    }

    @Override
    public Field<Integer> field5() {
        return AiContexts.AI_CONTEXTS.PROMPT_TOKENS_USED;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getOwnerId();
    }

    @Override
    public OffsetDateTime component3() {
        return getCreatedAt();
    }

    @Override
    public Integer component4() {
        return getCompletionTokensUsed();
    }

    @Override
    public Integer component5() {
        return getPromptTokensUsed();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getOwnerId();
    }

    @Override
    public OffsetDateTime value3() {
        return getCreatedAt();
    }

    @Override
    public Integer value4() {
        return getCompletionTokensUsed();
    }

    @Override
    public Integer value5() {
        return getPromptTokensUsed();
    }

    @Override
    public AiContextsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AiContextsRecord value2(Integer value) {
        setOwnerId(value);
        return this;
    }

    @Override
    public AiContextsRecord value3(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public AiContextsRecord value4(Integer value) {
        setCompletionTokensUsed(value);
        return this;
    }

    @Override
    public AiContextsRecord value5(Integer value) {
        setPromptTokensUsed(value);
        return this;
    }

    @Override
    public AiContextsRecord values(Long value1, Integer value2, OffsetDateTime value3, Integer value4, Integer value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AiContextsRecord
     */
    public AiContextsRecord() {
        super(AiContexts.AI_CONTEXTS);
    }

    /**
     * Create a detached, initialised AiContextsRecord
     */
    public AiContextsRecord(Long id, Integer ownerId, OffsetDateTime createdAt, Integer completionTokensUsed, Integer promptTokensUsed) {
        super(AiContexts.AI_CONTEXTS);

        setId(id);
        setOwnerId(ownerId);
        setCreatedAt(createdAt);
        setCompletionTokensUsed(completionTokensUsed);
        setPromptTokensUsed(promptTokensUsed);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AiContextsRecord
     */
    public AiContextsRecord(app.finwave.backend.jooq.tables.pojos.AiContexts value) {
        super(AiContexts.AI_CONTEXTS);

        if (value != null) {
            setId(value.getId());
            setOwnerId(value.getOwnerId());
            setCreatedAt(value.getCreatedAt());
            setCompletionTokensUsed(value.getCompletionTokensUsed());
            setPromptTokensUsed(value.getPromptTokensUsed());
            resetChangedOnNotNull();
        }
    }
}
