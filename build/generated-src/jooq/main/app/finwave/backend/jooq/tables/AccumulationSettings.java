/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables;


import app.finwave.backend.jooq.Keys;
import app.finwave.backend.jooq.Public;
import app.finwave.backend.jooq.tables.records.AccumulationSettingsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccumulationSettings extends TableImpl<AccumulationSettingsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.accumulation_settings</code>
     */
    public static final AccumulationSettings ACCUMULATION_SETTINGS = new AccumulationSettings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccumulationSettingsRecord> getRecordType() {
        return AccumulationSettingsRecord.class;
    }

    /**
     * The column <code>public.accumulation_settings.source_account_id</code>.
     */
    public final TableField<AccumulationSettingsRecord, Long> SOURCE_ACCOUNT_ID = createField(DSL.name("source_account_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.accumulation_settings.target_account_id</code>.
     */
    public final TableField<AccumulationSettingsRecord, Long> TARGET_ACCOUNT_ID = createField(DSL.name("target_account_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.accumulation_settings.category_id</code>.
     */
    public final TableField<AccumulationSettingsRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.accumulation_settings.owner_id</code>.
     */
    public final TableField<AccumulationSettingsRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.accumulation_settings.steps</code>.
     */
    public final TableField<AccumulationSettingsRecord, JSONB> STEPS = createField(DSL.name("steps"), SQLDataType.JSONB.nullable(false), this, "");

    private AccumulationSettings(Name alias, Table<AccumulationSettingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccumulationSettings(Name alias, Table<AccumulationSettingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.accumulation_settings</code> table
     * reference
     */
    public AccumulationSettings(String alias) {
        this(DSL.name(alias), ACCUMULATION_SETTINGS);
    }

    /**
     * Create an aliased <code>public.accumulation_settings</code> table
     * reference
     */
    public AccumulationSettings(Name alias) {
        this(alias, ACCUMULATION_SETTINGS);
    }

    /**
     * Create a <code>public.accumulation_settings</code> table reference
     */
    public AccumulationSettings() {
        this(DSL.name("accumulation_settings"), null);
    }

    public <O extends Record> AccumulationSettings(Table<O> child, ForeignKey<O, AccumulationSettingsRecord> key) {
        super(child, key, ACCUMULATION_SETTINGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<AccumulationSettingsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.ACCUMULATION_SETTINGS_SOURCE_ACCOUNT_ID_KEY);
    }

    @Override
    public List<ForeignKey<AccumulationSettingsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCUMULATION_SETTINGS__ACCUMULATION_SETTINGS_SOURCE_ACCOUNT_ID_FKEY, Keys.ACCUMULATION_SETTINGS__ACCUMULATION_SETTINGS_TARGET_ACCOUNT_ID_FKEY, Keys.ACCUMULATION_SETTINGS__ACCUMULATION_SETTINGS_TAG_ID_FKEY, Keys.ACCUMULATION_SETTINGS__ACCUMULATION_SETTINGS_OWNER_ID_FKEY);
    }

    private transient Accounts _accumulationSettingsSourceAccountIdFkey;
    private transient Accounts _accumulationSettingsTargetAccountIdFkey;
    private transient Categories _categories;
    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.accounts</code> table, via
     * the <code>accumulation_settings_source_account_id_fkey</code> key.
     */
    public Accounts accumulationSettingsSourceAccountIdFkey() {
        if (_accumulationSettingsSourceAccountIdFkey == null)
            _accumulationSettingsSourceAccountIdFkey = new Accounts(this, Keys.ACCUMULATION_SETTINGS__ACCUMULATION_SETTINGS_SOURCE_ACCOUNT_ID_FKEY);

        return _accumulationSettingsSourceAccountIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.accounts</code> table, via
     * the <code>accumulation_settings_target_account_id_fkey</code> key.
     */
    public Accounts accumulationSettingsTargetAccountIdFkey() {
        if (_accumulationSettingsTargetAccountIdFkey == null)
            _accumulationSettingsTargetAccountIdFkey = new Accounts(this, Keys.ACCUMULATION_SETTINGS__ACCUMULATION_SETTINGS_TARGET_ACCOUNT_ID_FKEY);

        return _accumulationSettingsTargetAccountIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.categories</code> table.
     */
    public Categories categories() {
        if (_categories == null)
            _categories = new Categories(this, Keys.ACCUMULATION_SETTINGS__ACCUMULATION_SETTINGS_TAG_ID_FKEY);

        return _categories;
    }

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.ACCUMULATION_SETTINGS__ACCUMULATION_SETTINGS_OWNER_ID_FKEY);

        return _users;
    }

    @Override
    public AccumulationSettings as(String alias) {
        return new AccumulationSettings(DSL.name(alias), this);
    }

    @Override
    public AccumulationSettings as(Name alias) {
        return new AccumulationSettings(alias, this);
    }

    @Override
    public AccumulationSettings as(Table<?> alias) {
        return new AccumulationSettings(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccumulationSettings rename(String name) {
        return new AccumulationSettings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccumulationSettings rename(Name name) {
        return new AccumulationSettings(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccumulationSettings rename(Table<?> name) {
        return new AccumulationSettings(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, Long, Integer, JSONB> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super Long, ? super Long, ? super Integer, ? super JSONB, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super Long, ? super Long, ? super Integer, ? super JSONB, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
