/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables;


import app.finwave.backend.jooq.Indexes;
import app.finwave.backend.jooq.Keys;
import app.finwave.backend.jooq.Public;
import app.finwave.backend.jooq.tables.records.TransactionsRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transactions extends TableImpl<TransactionsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.transactions</code>
     */
    public static final Transactions TRANSACTIONS = new Transactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsRecord> getRecordType() {
        return TransactionsRecord.class;
    }

    /**
     * The column <code>public.transactions.id</code>.
     */
    public final TableField<TransactionsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.transactions.owner_id</code>.
     */
    public final TableField<TransactionsRecord, Integer> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.transactions.category_id</code>.
     */
    public final TableField<TransactionsRecord, Long> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transactions.account_id</code>.
     */
    public final TableField<TransactionsRecord, Long> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transactions.currency_id</code>.
     */
    public final TableField<TransactionsRecord, Long> CURRENCY_ID = createField(DSL.name("currency_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.transactions.created_at</code>.
     */
    public final TableField<TransactionsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.transactions.delta</code>.
     */
    public final TableField<TransactionsRecord, BigDecimal> DELTA = createField(DSL.name("delta"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.transactions.description</code>.
     */
    public final TableField<TransactionsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.transactions.metadata_id</code>.
     */
    public final TableField<TransactionsRecord, Long> METADATA_ID = createField(DSL.name("metadata_id"), SQLDataType.BIGINT, this, "");

    private Transactions(Name alias, Table<TransactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transactions(Name alias, Table<TransactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(String alias) {
        this(DSL.name(alias), TRANSACTIONS);
    }

    /**
     * Create an aliased <code>public.transactions</code> table reference
     */
    public Transactions(Name alias) {
        this(alias, TRANSACTIONS);
    }

    /**
     * Create a <code>public.transactions</code> table reference
     */
    public Transactions() {
        this(DSL.name("transactions"), null);
    }

    public <O extends Record> Transactions(Table<O> child, ForeignKey<O, TransactionsRecord> key) {
        super(child, key, TRANSACTIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_TRANSACTIONS);
    }

    @Override
    public Identity<TransactionsRecord, Long> getIdentity() {
        return (Identity<TransactionsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionsRecord> getPrimaryKey() {
        return Keys.TRANSACTIONS_PKEY;
    }

    @Override
    public List<ForeignKey<TransactionsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTIONS__TRANSACTIONS_OWNER_ID_FKEY, Keys.TRANSACTIONS__TRANSACTIONS_TAG_ID_FKEY, Keys.TRANSACTIONS__TRANSACTIONS_ACCOUNT_ID_FKEY, Keys.TRANSACTIONS__TRANSACTIONS_CURRENCY_ID_FKEY, Keys.TRANSACTIONS__TRANSACTIONS_METADATA_ID_FKEY);
    }

    private transient Users _users;
    private transient Categories _categories;
    private transient Accounts _accounts;
    private transient Currencies _currencies;
    private transient TransactionsMetadata _transactionsMetadata;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.TRANSACTIONS__TRANSACTIONS_OWNER_ID_FKEY);

        return _users;
    }

    /**
     * Get the implicit join path to the <code>public.categories</code> table.
     */
    public Categories categories() {
        if (_categories == null)
            _categories = new Categories(this, Keys.TRANSACTIONS__TRANSACTIONS_TAG_ID_FKEY);

        return _categories;
    }

    /**
     * Get the implicit join path to the <code>public.accounts</code> table.
     */
    public Accounts accounts() {
        if (_accounts == null)
            _accounts = new Accounts(this, Keys.TRANSACTIONS__TRANSACTIONS_ACCOUNT_ID_FKEY);

        return _accounts;
    }

    /**
     * Get the implicit join path to the <code>public.currencies</code> table.
     */
    public Currencies currencies() {
        if (_currencies == null)
            _currencies = new Currencies(this, Keys.TRANSACTIONS__TRANSACTIONS_CURRENCY_ID_FKEY);

        return _currencies;
    }

    /**
     * Get the implicit join path to the
     * <code>public.transactions_metadata</code> table.
     */
    public TransactionsMetadata transactionsMetadata() {
        if (_transactionsMetadata == null)
            _transactionsMetadata = new TransactionsMetadata(this, Keys.TRANSACTIONS__TRANSACTIONS_METADATA_ID_FKEY);

        return _transactionsMetadata;
    }

    @Override
    public Transactions as(String alias) {
        return new Transactions(DSL.name(alias), this);
    }

    @Override
    public Transactions as(Name alias) {
        return new Transactions(alias, this);
    }

    @Override
    public Transactions as(Table<?> alias) {
        return new Transactions(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(String name) {
        return new Transactions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Name name) {
        return new Transactions(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transactions rename(Table<?> name) {
        return new Transactions(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Integer, Long, Long, Long, OffsetDateTime, BigDecimal, String, Long> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Integer, ? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super BigDecimal, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Integer, ? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super BigDecimal, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
