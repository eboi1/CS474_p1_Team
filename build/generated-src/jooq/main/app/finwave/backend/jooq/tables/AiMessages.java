/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables;


import app.finwave.backend.jooq.Indexes;
import app.finwave.backend.jooq.Keys;
import app.finwave.backend.jooq.Public;
import app.finwave.backend.jooq.tables.records.AiMessagesRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AiMessages extends TableImpl<AiMessagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.ai_messages</code>
     */
    public static final AiMessages AI_MESSAGES = new AiMessages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AiMessagesRecord> getRecordType() {
        return AiMessagesRecord.class;
    }

    /**
     * The column <code>public.ai_messages.id</code>.
     */
    public final TableField<AiMessagesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.ai_messages.ai_context</code>.
     */
    public final TableField<AiMessagesRecord, Long> AI_CONTEXT = createField(DSL.name("ai_context"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ai_messages.role</code>.
     */
    public final TableField<AiMessagesRecord, String> ROLE = createField(DSL.name("role"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.ai_messages.content</code>.
     */
    public final TableField<AiMessagesRecord, JSON> CONTENT = createField(DSL.name("content"), SQLDataType.JSON.nullable(false), this, "");

    private AiMessages(Name alias, Table<AiMessagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private AiMessages(Name alias, Table<AiMessagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.ai_messages</code> table reference
     */
    public AiMessages(String alias) {
        this(DSL.name(alias), AI_MESSAGES);
    }

    /**
     * Create an aliased <code>public.ai_messages</code> table reference
     */
    public AiMessages(Name alias) {
        this(alias, AI_MESSAGES);
    }

    /**
     * Create a <code>public.ai_messages</code> table reference
     */
    public AiMessages() {
        this(DSL.name("ai_messages"), null);
    }

    public <O extends Record> AiMessages(Table<O> child, ForeignKey<O, AiMessagesRecord> key) {
        super(child, key, AI_MESSAGES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_AI_MESSAGES);
    }

    @Override
    public Identity<AiMessagesRecord, Long> getIdentity() {
        return (Identity<AiMessagesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AiMessagesRecord> getPrimaryKey() {
        return Keys.AI_MESSAGES_PKEY;
    }

    @Override
    public List<ForeignKey<AiMessagesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AI_MESSAGES__AI_MESSAGES_AI_CONTEXT_FKEY);
    }

    private transient AiContexts _aiContexts;

    /**
     * Get the implicit join path to the <code>public.ai_contexts</code> table.
     */
    public AiContexts aiContexts() {
        if (_aiContexts == null)
            _aiContexts = new AiContexts(this, Keys.AI_MESSAGES__AI_MESSAGES_AI_CONTEXT_FKEY);

        return _aiContexts;
    }

    @Override
    public AiMessages as(String alias) {
        return new AiMessages(DSL.name(alias), this);
    }

    @Override
    public AiMessages as(Name alias) {
        return new AiMessages(alias, this);
    }

    @Override
    public AiMessages as(Table<?> alias) {
        return new AiMessages(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AiMessages rename(String name) {
        return new AiMessages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AiMessages rename(Name name) {
        return new AiMessages(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AiMessages rename(Table<?> name) {
        return new AiMessages(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, JSON> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super String, ? super JSON, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super String, ? super JSON, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
