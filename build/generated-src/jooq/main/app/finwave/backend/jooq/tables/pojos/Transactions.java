/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables.pojos;


import java.io.Serializable;
import java.math.BigDecimal;
import java.time.OffsetDateTime;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transactions implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Long id;
    private final Integer ownerId;
    private final Long categoryId;
    private final Long accountId;
    private final Long currencyId;
    private final OffsetDateTime createdAt;
    private final BigDecimal delta;
    private final String description;
    private final Long metadataId;

    public Transactions(Transactions value) {
        this.id = value.id;
        this.ownerId = value.ownerId;
        this.categoryId = value.categoryId;
        this.accountId = value.accountId;
        this.currencyId = value.currencyId;
        this.createdAt = value.createdAt;
        this.delta = value.delta;
        this.description = value.description;
        this.metadataId = value.metadataId;
    }

    public Transactions(
        Long id,
        Integer ownerId,
        Long categoryId,
        Long accountId,
        Long currencyId,
        OffsetDateTime createdAt,
        BigDecimal delta,
        String description,
        Long metadataId
    ) {
        this.id = id;
        this.ownerId = ownerId;
        this.categoryId = categoryId;
        this.accountId = accountId;
        this.currencyId = currencyId;
        this.createdAt = createdAt;
        this.delta = delta;
        this.description = description;
        this.metadataId = metadataId;
    }

    /**
     * Getter for <code>public.transactions.id</code>.
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Getter for <code>public.transactions.owner_id</code>.
     */
    public Integer getOwnerId() {
        return this.ownerId;
    }

    /**
     * Getter for <code>public.transactions.category_id</code>.
     */
    public Long getCategoryId() {
        return this.categoryId;
    }

    /**
     * Getter for <code>public.transactions.account_id</code>.
     */
    public Long getAccountId() {
        return this.accountId;
    }

    /**
     * Getter for <code>public.transactions.currency_id</code>.
     */
    public Long getCurrencyId() {
        return this.currencyId;
    }

    /**
     * Getter for <code>public.transactions.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return this.createdAt;
    }

    /**
     * Getter for <code>public.transactions.delta</code>.
     */
    public BigDecimal getDelta() {
        return this.delta;
    }

    /**
     * Getter for <code>public.transactions.description</code>.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Getter for <code>public.transactions.metadata_id</code>.
     */
    public Long getMetadataId() {
        return this.metadataId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Transactions other = (Transactions) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.ownerId == null) {
            if (other.ownerId != null)
                return false;
        }
        else if (!this.ownerId.equals(other.ownerId))
            return false;
        if (this.categoryId == null) {
            if (other.categoryId != null)
                return false;
        }
        else if (!this.categoryId.equals(other.categoryId))
            return false;
        if (this.accountId == null) {
            if (other.accountId != null)
                return false;
        }
        else if (!this.accountId.equals(other.accountId))
            return false;
        if (this.currencyId == null) {
            if (other.currencyId != null)
                return false;
        }
        else if (!this.currencyId.equals(other.currencyId))
            return false;
        if (this.createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!this.createdAt.equals(other.createdAt))
            return false;
        if (this.delta == null) {
            if (other.delta != null)
                return false;
        }
        else if (!this.delta.equals(other.delta))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        if (this.metadataId == null) {
            if (other.metadataId != null)
                return false;
        }
        else if (!this.metadataId.equals(other.metadataId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.ownerId == null) ? 0 : this.ownerId.hashCode());
        result = prime * result + ((this.categoryId == null) ? 0 : this.categoryId.hashCode());
        result = prime * result + ((this.accountId == null) ? 0 : this.accountId.hashCode());
        result = prime * result + ((this.currencyId == null) ? 0 : this.currencyId.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.delta == null) ? 0 : this.delta.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.metadataId == null) ? 0 : this.metadataId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Transactions (");

        sb.append(id);
        sb.append(", ").append(ownerId);
        sb.append(", ").append(categoryId);
        sb.append(", ").append(accountId);
        sb.append(", ").append(currencyId);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(delta);
        sb.append(", ").append(description);
        sb.append(", ").append(metadataId);

        sb.append(")");
        return sb.toString();
    }
}
