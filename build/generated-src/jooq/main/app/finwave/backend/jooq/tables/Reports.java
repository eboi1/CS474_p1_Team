/*
 * This file is generated by jOOQ.
 */
package app.finwave.backend.jooq.tables;


import app.finwave.backend.jooq.Keys;
import app.finwave.backend.jooq.Public;
import app.finwave.backend.jooq.tables.records.ReportsRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.JSONB;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Reports extends TableImpl<ReportsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.reports</code>
     */
    public static final Reports REPORTS = new Reports();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReportsRecord> getRecordType() {
        return ReportsRecord.class;
    }

    /**
     * The column <code>public.reports.description</code>.
     */
    public final TableField<ReportsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.reports.status</code>.
     */
    public final TableField<ReportsRecord, Short> STATUS = createField(DSL.name("status"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.reports.type</code>.
     */
    public final TableField<ReportsRecord, Short> TYPE = createField(DSL.name("type"), SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.reports.filter</code>.
     */
    public final TableField<ReportsRecord, JSONB> FILTER = createField(DSL.name("filter"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.reports.lang</code>.
     */
    public final TableField<ReportsRecord, JSONB> LANG = createField(DSL.name("lang"), SQLDataType.JSONB, this, "");

    /**
     * The column <code>public.reports.user_id</code>.
     */
    public final TableField<ReportsRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.reports.file_id</code>.
     */
    public final TableField<ReportsRecord, String> FILE_ID = createField(DSL.name("file_id"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.reports.id</code>.
     */
    public final TableField<ReportsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    private Reports(Name alias, Table<ReportsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Reports(Name alias, Table<ReportsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.reports</code> table reference
     */
    public Reports(String alias) {
        this(DSL.name(alias), REPORTS);
    }

    /**
     * Create an aliased <code>public.reports</code> table reference
     */
    public Reports(Name alias) {
        this(alias, REPORTS);
    }

    /**
     * Create a <code>public.reports</code> table reference
     */
    public Reports() {
        this(DSL.name("reports"), null);
    }

    public <O extends Record> Reports(Table<O> child, ForeignKey<O, ReportsRecord> key) {
        super(child, key, REPORTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ReportsRecord, Long> getIdentity() {
        return (Identity<ReportsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReportsRecord> getPrimaryKey() {
        return Keys.REPORTS_PKEY;
    }

    @Override
    public List<ForeignKey<ReportsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.REPORTS__REPORTS_USER_ID_FKEY);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.REPORTS__REPORTS_USER_ID_FKEY);

        return _users;
    }

    @Override
    public Reports as(String alias) {
        return new Reports(DSL.name(alias), this);
    }

    @Override
    public Reports as(Name alias) {
        return new Reports(alias, this);
    }

    @Override
    public Reports as(Table<?> alias) {
        return new Reports(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Reports rename(String name) {
        return new Reports(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reports rename(Name name) {
        return new Reports(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Reports rename(Table<?> name) {
        return new Reports(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<String, Short, Short, JSONB, JSONB, Integer, String, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super String, ? super Short, ? super Short, ? super JSONB, ? super JSONB, ? super Integer, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super String, ? super Short, ? super Short, ? super JSONB, ? super JSONB, ? super Integer, ? super String, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
